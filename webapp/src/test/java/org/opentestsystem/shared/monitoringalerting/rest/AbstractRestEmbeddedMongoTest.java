/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.monitoringalerting.rest;

import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import de.flapdoodle.embed.mongo.config.MongodConfigBuilder;
import de.flapdoodle.embed.mongo.config.Net;
import org.junit.After;
import org.junit.Before;
import org.junit.runner.RunWith;
import org.opentestsystem.shared.exception.RestException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.data.mongodb.core.query.Query;
import org.springframework.http.MediaType;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.test.context.web.WebAppConfiguration;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;
import org.springframework.test.web.servlet.ResultMatcher;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.web.context.WebApplicationContext;

import com.fasterxml.jackson.databind.ObjectMapper;

import de.flapdoodle.embed.mongo.MongodStarter;
import de.flapdoodle.embed.mongo.distribution.Version;

@WebAppConfiguration
@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations = { "classpath:rest-context.xml", "classpath:test-queue-context.xml",
        "classpath:persistence-context.xml" })
@SuppressWarnings({ "PMD.ExcessiveImports", "PMD.MoreThanOneLogger", "PMD.AvoidPrintStackTrace", "PMD.AvoidCatchingGenericException", "PMD.AbstractClassWithoutAbstractMethod" })
public abstract class AbstractRestEmbeddedMongoTest {

    private static final int MONGO_TEST_PORT = 55550;

    private static final Logger LOGGER = LoggerFactory.getLogger(AbstractRestEmbeddedMongoTest.class);

    private static final String SYS_IDX = "system.indexes";

    // setup our embedded mongo once for this jvm
    static {
        try {
            MongodStarter.getDefaultInstance().prepare(new MongodConfigBuilder()
                    .version(Version.Main.PRODUCTION)
                    .net(new Net("localhost", MONGO_TEST_PORT, false))
                    .build()).start();
        } catch (Exception e) {
            new RuntimeException("something went wrong", e);
        }
    }

    @Autowired
    private WebApplicationContext webApplicationContext;

    @Autowired
    protected MongoTemplate mongoTemplate;

    protected MockMvc mockMvc;

    @Before
    public void setUp() {
        mockMvc = MockMvcBuilders.webAppContextSetup(webApplicationContext).build();
    }

    protected byte[] getJsonContent(final Map<String, Object> params) {
        byte[] bytes = null;
        try {
            ObjectMapper mapper = new ObjectMapper();
            bytes = mapper.writeValueAsBytes(params);
        } catch (Exception e) {
            LOGGER.error(e.getMessage());
            throw new RestException("unit.test.error", e);
        }
        return bytes;
    }

    @After
    public void dropCollections() {
        Query all = new Query();
        for (String collectionName : mongoTemplate.getCollectionNames()) {
            if (!SYS_IDX.equals(collectionName)) {
                mongoTemplate.remove(all, collectionName);
            }
        }
    }

    protected <T> T callGETRestService(final String uri, final Class<T> responseObjectType, final ResultMatcher expectedResult) {
        T object = null;
        try {
            MvcResult result = mockMvc.perform(get(uri).accept(MediaType.APPLICATION_JSON)).andExpect(expectedResult)
                    .andReturn();
            String responseGet = result.getResponse().getContentAsString();
            ObjectMapper mapper = new ObjectMapper();

            if (responseGet != null && responseGet.length() > 1) {
                object = mapper.readValue(responseGet, responseObjectType);
            }
        } catch (Exception e) {
            throw new RestException("error int callGETRestService " + uri, e);
        }
        return object;
    }

    protected <T> T callGETRestService(final String uri, final Class<T> responseObjectType) {
        return callGETRestService(uri, responseObjectType, status().isOk());
    }

    protected <T> T callPOSTRestService(final String uri, final Map<String, Object> jsonParams, final Class<T> responseObjectType) {
        T object = null;
        try {
            MvcResult result = mockMvc
                    .perform(
                            post(uri).accept(MediaType.ALL).contentType(MediaType.APPLICATION_JSON)
                                    .content(getJsonContent(jsonParams))).andExpect(status().isCreated()).andReturn();
            String responseGet = result.getResponse().getContentAsString();
            ObjectMapper mapper = new ObjectMapper();
            object = mapper.readValue(responseGet, responseObjectType);
        } catch (Exception e) {
            e.printStackTrace();
            throw new RestException("error int callPOSTRestService " + uri, e);
        }
        return object;
    }

    protected <T> T callPutRestService(final String uri, final Map<String, Object> jsonParams, final Class<T> responseObjectType) {
        T object = null;
        try {
            MvcResult result = mockMvc
                    .perform(
                            put(uri).accept(MediaType.ALL).contentType(MediaType.APPLICATION_JSON)
                                    .content(getJsonContent(jsonParams))).andExpect(status().isCreated()).andReturn();
            String responseGet = result.getResponse().getContentAsString();
            ObjectMapper mapper = new ObjectMapper();
            object = mapper.readValue(responseGet, responseObjectType);
        } catch (Exception e) {
            e.printStackTrace();
            throw new RestException("error int callPUTRestService " + uri, e);
        }
        return object;
    }

    protected String buildQueryString(final Map<String, String> params) {
        StringBuffer sBuf = new StringBuffer();
        sBuf.append('?');
        boolean first = true;
        for (Entry<String, String> arg : params.entrySet()) {
            if (!first) {
                sBuf.append('&');
            }
            sBuf.append(arg.getKey()).append('=').append(arg.getValue());
            first = false;
        }
        return sBuf.toString();
    }

    @SafeVarargs
    protected final List<Map<String, Object>> buildParamList(final Map<String, Object>... params) {
        return Arrays.asList(params);
    }

}
