/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.monitoringalerting.service.impl;

import org.joda.time.DateTime;
import org.opentestsystem.shared.monitoringalerting.domain.Metric;
import org.opentestsystem.shared.monitoringalerting.domain.search.MetricSearchRequest;
import org.opentestsystem.shared.monitoringalerting.gateway.MetricService;
import org.opentestsystem.shared.monitoringalerting.persistence.LastCreatedMetricRepository;
import org.opentestsystem.shared.monitoringalerting.persistence.MetricRepository;
import org.opentestsystem.shared.search.domain.SearchResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;


public class MetricServiceImpl implements MetricService {

    /** logger **/
    @SuppressWarnings("unused")
    private static final Logger LOGGER = LoggerFactory.getLogger(MetricServiceImpl.class);

    @Autowired
    private MetricRepository metricRepository;

    @Autowired
    private LastCreatedMetricRepository lastCreatedMetricRepository;

    @Override
    public SearchResponse<Metric> searchMetrics(final MetricSearchRequest searchRequest) {
        return metricRepository.search(searchRequest);
    }

    @Override
    public Metric addMetric(final Metric metric) {
        metric.setInsertTimestamp(new DateTime());
        Metric ret = metricRepository.save(metric);
        lastCreatedMetricRepository.customSave(metric);
        return ret;
    }

    @Override
    public Metric findLastCreatedSpecificMetric(final Metric search) {
        // LOGGER.debug("processing metric search: find most recent using: " + search.toString());
        Metric ret = lastCreatedMetricRepository.findMostRecent(search);

        return ret;
    }

}
