/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.monitoringalerting.persistence;

import static org.springframework.data.mongodb.core.query.Criteria.where;

import java.util.List;

import org.joda.time.DateTime;
import org.opentestsystem.shared.monitoringalerting.domain.Log;
import org.opentestsystem.shared.monitoringalerting.domain.search.AbstractRangedSearchRequest;
import org.opentestsystem.shared.monitoringalerting.domain.search.RangedSearchResponse;
import org.opentestsystem.shared.search.domain.AbstractSearchRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.data.mongodb.core.query.Criteria;
import org.springframework.data.mongodb.core.query.Query;

public class LogRepositoryImpl implements CustomLogRepository {

    @Autowired
    private MongoTemplate mongoTemplate;

    @Override
    public List<Log> findByAgeGreaterThanDays(final Integer days) {
        final Query query = new Query();
        query.addCriteria(where("insertTimestamp").lt(new DateTime().minusDays(days).toDate()));
        return this.mongoTemplate.find(query, Log.class);
    }
    
    @Override
    public void removeByAgeGreatherThanDays(final Integer days) {
    	Query query = new Query(Criteria.where("insertTimestamp").lt(new DateTime().minusDays(days).toDate()));
    	mongoTemplate.remove(query, Log.class);
    }

    @Override
    public RangedSearchResponse<Log> search(final AbstractSearchRequest abstractSearchRequest) {
        final AbstractRangedSearchRequest abstractRangedSearchRequest = (AbstractRangedSearchRequest) abstractSearchRequest;
        final Query query = abstractRangedSearchRequest.buildQuery();
        final Query totalCountQuery = abstractRangedSearchRequest.buildTotalCountQuery();
        final long total = this.mongoTemplate.count(totalCountQuery, Log.class);
        final List<Log> results = this.mongoTemplate.find(query, Log.class);
        return new RangedSearchResponse<Log>(results, abstractRangedSearchRequest, total);
    }
}
