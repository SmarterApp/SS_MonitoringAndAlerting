/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.monitoringalerting.service;

import java.util.ArrayList;
import java.util.List;

import org.apache.commons.beanutils.BeanUtils;
import org.opentestsystem.shared.monitoringalerting.domain.MABase;
import org.opentestsystem.shared.monitoringalerting.domain.Notification;
import org.opentestsystem.shared.monitoringalerting.domain.NotificationGroup;
import org.opentestsystem.shared.monitoringalerting.domain.NotificationRule;
import org.opentestsystem.shared.monitoringalerting.persistence.NotificationRepository;
import org.opentestsystem.shared.monitoringalerting.persistence.NotificationRuleRepository;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.mail.MailSender;
import org.springframework.mail.SimpleMailMessage;

@SuppressWarnings({ "PMD.CollapsibleIfStatements", "PMD.AvoidDeeplyNestedIfStmts" })
public abstract class AbstractNotificationService<D extends MABase> implements NotificationService<D> {

    private static final Logger LOGGER = LoggerFactory.getLogger(AbstractNotificationService.class);

    @Autowired
    private NotificationRuleRepository notificationRuleRepository;

    @Autowired
    private NotificationRepository notificationRepository;

    @Autowired
    private MailSender mailSender;

    private String fromAddress;

    // booleans auto-init to false
    private boolean emailActive;

    private String subjectPrefix = "";

    // TODO want to cache this
    private Iterable<NotificationRule> getActiveRules() {
        return notificationRuleRepository.findByActive(true);
    }

    @Override
    public void processNotifications(final D mnadomain) {
        Iterable<NotificationRule> activeRules = getActiveRules();
        for (NotificationRule rule : activeRules) {
            if (rule.getRuleType().getDomainClass().equals(mnadomain.getClass())) {
                try {
                    String property = BeanUtils.getProperty(mnadomain, rule.getAttribute());
                    if (property != null && rule.getRegex() != null) {
                        if (property.matches(rule.getRegex())) {
                            List<Notification> notificationLst = buildNotificationList(mnadomain, rule);
                            sendNotifications(notificationLst);
                        }
                    }
                } catch (Exception e) { // NOPMD
                    LOGGER.error("error processing Rule: " + rule.getAttribute(), e);
                }
            }
        }
    }

    private List<Notification> buildNotificationList(final D mnadomain, final NotificationRule rule) {
        List<Notification> notificationLst = new ArrayList<Notification>();
        for (NotificationGroup grp : rule.getNotificationGroups()) {
            if (grp != null && grp.isActive()) {
                notificationLst.add(buildNotification(mnadomain, rule, grp));
            }
        }
        return notificationLst;
    }

    protected abstract Notification buildNotification(final D mnadomain, final NotificationRule rule, final NotificationGroup grp);

    private void sendNotifications(final List<Notification> notifications) {
        for (Notification notification : notifications) {
            notificationRepository.save(notification);

            if (this.emailActive) {
                SimpleMailMessage message = new SimpleMailMessage(); // NOPMD
                message.setFrom(this.fromAddress);
                message.setBcc(notification.getAddresses().toArray(new String[]{}));
                message.setSubject(subjectPrefix + " " + notification.getSubject());
                message.setText(notification.getContent());
                mailSender.send(message);
            }
        }
    }

    public void setFromAddress(final String inFromAddress) {
        this.fromAddress = inFromAddress;
    }

    public void setEmailActive(final boolean inEmailActive) {
        this.emailActive = inEmailActive;
    }

    public void setSubjectPrefix(final String inSubjectPrefix) {
        this.subjectPrefix = inSubjectPrefix;
    }

}
