/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.monitoringalerting.service.impl;

import org.joda.time.DateTime;
import org.opentestsystem.shared.monitoringalerting.domain.DiscreteIntake;
import org.opentestsystem.shared.monitoringalerting.domain.DiscreteIntake.TYPE;
import org.opentestsystem.shared.monitoringalerting.domain.Log;
import org.opentestsystem.shared.monitoringalerting.domain.search.LogSearchRequest;
import org.opentestsystem.shared.monitoringalerting.domain.search.RangedSearchResponse;
import org.opentestsystem.shared.monitoringalerting.gateway.DiscreteIntakeService;
import org.opentestsystem.shared.monitoringalerting.gateway.LogService;
import org.opentestsystem.shared.monitoringalerting.persistence.LogRepository;
import org.opentestsystem.shared.monitoringalerting.service.NotificationService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;

@SuppressWarnings({ "PMD.ProperLogger" })
public class LogServiceImpl implements LogService {

    /** logger. **/
    private static final Logger LOGGER = LoggerFactory.getLogger(LogServiceImpl.class);

    @Autowired
    private LogRepository logRepository;

    @Autowired
    private NotificationService<Log> logNotificationService;

    @Autowired
    private DiscreteIntakeService discreteIntakeService;

    @Override
    public RangedSearchResponse<Log> searchLogs(final LogSearchRequest searchRequest) {
        return this.logRepository.search(searchRequest);
    }

    @Override
    public Log addLog(final Log log) {
        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug("processing Log message: " + log.toString());
        }
        log.setInsertTimestamp(new DateTime());
        final Log ret = this.logRepository.save(log);
        this.logNotificationService.processNotifications(log);
        this.discreteIntakeService.save(new DiscreteIntake(TYPE.SERVER, log.getServer()));
        this.discreteIntakeService.save(new DiscreteIntake(TYPE.COMPONENT, log.getComponent()));
        return ret;
    }
}
