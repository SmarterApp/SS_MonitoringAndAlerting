/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.monitoringalerting.service.impl;

import org.joda.time.DateTime;
import org.opentestsystem.shared.monitoringalerting.domain.Alert;
import org.opentestsystem.shared.monitoringalerting.domain.DiscreteIntake;
import org.opentestsystem.shared.monitoringalerting.domain.DiscreteIntake.TYPE;
import org.opentestsystem.shared.monitoringalerting.domain.search.AlertSearchRequest;
import org.opentestsystem.shared.monitoringalerting.gateway.AlertService;
import org.opentestsystem.shared.monitoringalerting.gateway.DiscreteIntakeService;
import org.opentestsystem.shared.monitoringalerting.persistence.AlertRepository;
import org.opentestsystem.shared.monitoringalerting.service.NotificationService;
import org.opentestsystem.shared.search.domain.SearchResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;

public class AlertServiceImpl implements AlertService {

    /** logger. **/
    private static final Logger LOGGER = LoggerFactory.getLogger(AlertServiceImpl.class);

    @Autowired
    private AlertRepository alertRepository;

    @Autowired
    private NotificationService<Alert> alertNotificationService;

    @Autowired
    private DiscreteIntakeService discreteIntakeService;

    @Override
    public SearchResponse<Alert> searchAlerts(final AlertSearchRequest searchRequest) {
        return this.alertRepository.search(searchRequest);
    }

    @Override
    public Alert addAlert(final Alert alert) {
        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug("processing Alert message: " + alert.toString());
        }
        alert.setInsertTimestamp(new DateTime());
        final Alert ret = this.alertRepository.save(alert);
        this.alertNotificationService.processNotifications(ret);
        this.discreteIntakeService.save(new DiscreteIntake(TYPE.ALERT, alert.getAlertType()));
        return ret;
    }
}
