/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.monitoringalerting.persistence;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import java.util.Arrays;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.junit.Test;
import org.opentestsystem.shared.monitoringalerting.AbstractPersistenceEmbeddedTest;
import org.opentestsystem.shared.monitoringalerting.domain.NotificationGroup;
import org.opentestsystem.shared.monitoringalerting.domain.NotificationRule;
import org.springframework.beans.factory.annotation.Autowired;

public class NotificationRuleRepositoryIntegrationTest extends AbstractPersistenceEmbeddedTest {

    @Autowired
    private NotificationRuleRepository notificationRuleRepository;

    @Autowired
    private NotificationGroupRepository notificationGroupRepository;

    @Test
    public void insertAndRead() {
        NotificationGroup grp1 = new NotificationGroup();
        grp1.setGroupName("Packers");
        grp1.setMemberNames(Arrays.asList(new String[] { "AaronRodgers@domain.com", "ClayMatthews@domain.com" }));
        notificationGroupRepository.save(grp1);
        NotificationGroup grp2 = new NotificationGroup();
        grp2.setGroupName("Badgers");
        grp2.setMemberNames(Arrays.asList(new String[] { "JJWatt@domain.com", "RussellWilson@domain.com" }));
        notificationGroupRepository.save(grp2);

        NotificationRule notificationRule = FACTORY.manufacturePojo(NotificationRule.class);
        notificationRule.setId(null);
        notificationRule.setNotificationGroups(Arrays.asList(new NotificationGroup[] { grp1, grp2 }));
        notificationRuleRepository.save(notificationRule);

        assertNotNull("id not set", notificationRule);

        NotificationRule newObj = notificationRuleRepository.findOne(notificationRule.getId());

        for (int indx = 0; indx < newObj.getNotificationGroups().size(); indx++) {
            assertTrue("should have same values", EqualsBuilder.reflectionEquals(notificationRule
                    .getNotificationGroups().get(indx), newObj.getNotificationGroups().get(indx)));
        }
        newObj.setNotificationGroups(null);
        notificationRule.setNotificationGroups(null);
        assertTrue("should have same values", EqualsBuilder.reflectionEquals(notificationRule, newObj));
    }

    @Test
    public void insertWithDBRef() {
        NotificationGroup grp1 = new NotificationGroup();
        grp1.setGroupName("Packers");
        grp1.setMemberNames(Arrays.asList(new String[] { "AaronRodgers@domain.com", "ClayMatthews@domain.com" }));
        notificationGroupRepository.save(grp1);

        NotificationGroup refGrp = new NotificationGroup();
        refGrp.setId(grp1.getId());

        NotificationRule notificationRule = FACTORY.manufacturePojo(NotificationRule.class);
        notificationRule.setId(null);
        notificationRule.setNotificationGroups(Arrays.asList(new NotificationGroup[] { refGrp }));
        notificationRuleRepository.save(notificationRule);
        assertNotNull("id not set", notificationRule);

        // verify full object is returned on a read.
        NotificationRule updated = notificationRuleRepository.findOne(notificationRule.getId());
        assertEquals("size should be 1", 1, updated.getNotificationGroups().size());
        assertEquals("group name should be Packers", "Packers", updated.getNotificationGroups().get(0).getGroupName());
    }

}
