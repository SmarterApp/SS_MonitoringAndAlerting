/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.monitoringalerting.service;

import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.MatcherAssert.assertThat;

import org.junit.Test;
import org.opentestsystem.shared.monitoringalerting.AbstractPersistenceEmbeddedTest;
import org.opentestsystem.shared.monitoringalerting.domain.DiscreteIntake;
import org.opentestsystem.shared.monitoringalerting.domain.DiscreteIntake.TYPE;
import org.opentestsystem.shared.monitoringalerting.gateway.DiscreteIntakeService;
import org.springframework.beans.factory.annotation.Autowired;

public class DiscreteIntakeServiceTest extends AbstractPersistenceEmbeddedTest {

    @Autowired
    private DiscreteIntakeService discreteIntakeService;

    @Test
    public void testPagingFeatures() {
        createDiscreteIntakes(10, TYPE.ALERT, "alert1");
        createDiscreteIntakes(10, TYPE.ALERT, "alert2");
        createDiscreteIntakes(10, TYPE.SERVER, "server1");
        createDiscreteIntakes(10, TYPE.SERVER, "server2");
        createDiscreteIntakes(10, TYPE.COMPONENT, "component1");
        createDiscreteIntakes(10, TYPE.COMPONENT, "component2");

        final String[] distinctAlertTypes = this.discreteIntakeService.getDistinctAlertTypes();
        assertThat(distinctAlertTypes.length, is(2));

        final String[] distinctServers = this.discreteIntakeService.getDistinctServers();
        assertThat(distinctServers.length, is(2));

        final String[] distinctComponents = this.discreteIntakeService.getDistinctComponents();
        assertThat(distinctComponents.length, is(2));
    }

    private void createDiscreteIntakes(final int count, final TYPE type, final String value) {
        for (int i = 0; i < count; i++) {
            this.discreteIntakeService.save(new DiscreteIntake(type, value));
        }

    }
}
