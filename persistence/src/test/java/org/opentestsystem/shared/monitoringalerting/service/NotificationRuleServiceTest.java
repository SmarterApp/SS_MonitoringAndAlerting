/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.monitoringalerting.service;

import static org.junit.Assert.assertEquals;

import java.lang.reflect.InvocationTargetException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.beanutils.BeanUtils;
import org.junit.Test;
import org.opentestsystem.shared.monitoringalerting.AbstractPersistenceEmbeddedTest;
import org.opentestsystem.shared.monitoringalerting.domain.MAException;
import org.opentestsystem.shared.monitoringalerting.domain.NotificationRule;
import org.opentestsystem.shared.monitoringalerting.domain.NotificationRuleType;
import org.opentestsystem.shared.monitoringalerting.domain.search.NotificationRuleSearchRequest;
import org.opentestsystem.shared.monitoringalerting.gateway.NotificationRuleService;
import org.opentestsystem.shared.search.domain.SearchResponse;
import org.springframework.beans.factory.annotation.Autowired;

@SuppressWarnings({ "PMD.AvoidCatchingGenericException" })
public class NotificationRuleServiceTest extends AbstractPersistenceEmbeddedTest {

    @Autowired
    private NotificationRuleService notificationRuleService;

    private List<NotificationRule> createRules(final int count, final String property, final Object value) {
        List<NotificationRule> rules = new ArrayList<NotificationRule>(count);
        for (int i = 0; i < count; i++) {
            NotificationRule rule = FACTORY.manufacturePojo(NotificationRule.class);
            rule.setId(null);
            try {
                BeanUtils.setProperty(rule, property, value);
            } catch (Exception e) {
                throw new MAException("error with data setup.", e);
            }
            notificationRuleService.save(rule);
            rules.add(rule);
        }
        return rules;
    }

    @Test
    public void testAttributeFilters() throws IllegalAccessException, InvocationTargetException, NoSuchMethodException {
        String filter = "attribute";
        createRules(1, filter, "aVal1");
        createRules(2, filter, "aVal2");

        Map<String, String[]> requestMap = new HashMap<String, String[]>();
        requestMap.put(filter, new String[] { "aVal2" });

        NotificationRuleSearchRequest searchRequest = new NotificationRuleSearchRequest(requestMap);

        SearchResponse<NotificationRule> response = notificationRuleService.search(searchRequest);

        assertEquals("wrong response count for filter " + filter, 2, response.getReturnCount());
        assertEquals("wrong number of results count " + filter, 2, response.getSearchResults().size());
        for (NotificationRule result : response.getSearchResults()) {
            assertEquals("search did not filter objects correctly", "aVal2", result.getAttribute());
        }

    }

    @Test
    public void testRuleTYpeFilters() throws IllegalAccessException, InvocationTargetException, NoSuchMethodException {
        String filter = "ruleType";
        createRules(1, filter, NotificationRuleType.LOG);
        createRules(2, filter, NotificationRuleType.ALERT);

        Map<String, String[]> requestMap = new HashMap<String, String[]>();
        requestMap.put(filter, new String[] { "ALERT" });

        NotificationRuleSearchRequest searchRequest = new NotificationRuleSearchRequest(requestMap);

        SearchResponse<NotificationRule> response = notificationRuleService.search(searchRequest);

        assertEquals("wrong response count for filter " + filter, 2, response.getReturnCount());
        assertEquals("wrong number of results count " + filter, 2, response.getSearchResults().size());
        for (NotificationRule result : response.getSearchResults()) {
            assertEquals("search did not filter objects correctly", NotificationRuleType.ALERT, result.getRuleType());
        }
    }

}
