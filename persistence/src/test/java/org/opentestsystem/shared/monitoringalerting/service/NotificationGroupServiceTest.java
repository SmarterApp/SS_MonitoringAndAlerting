/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.monitoringalerting.service;

import static org.junit.Assert.assertEquals;

import java.lang.reflect.InvocationTargetException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.beanutils.BeanUtils;
import org.junit.Test;
import org.opentestsystem.shared.monitoringalerting.AbstractPersistenceEmbeddedTest;
import org.opentestsystem.shared.monitoringalerting.domain.MAException;
import org.opentestsystem.shared.monitoringalerting.domain.NotificationGroup;
import org.opentestsystem.shared.monitoringalerting.domain.search.NotificationGroupSearchRequest;
import org.opentestsystem.shared.monitoringalerting.gateway.NotificationGroupService;
import org.opentestsystem.shared.search.domain.SearchResponse;
import org.springframework.beans.factory.annotation.Autowired;


@SuppressWarnings({ "PMD.AvoidCatchingGenericException", "PMD.UseConcurrentHashMap" })
public class NotificationGroupServiceTest extends AbstractPersistenceEmbeddedTest {

    @Autowired
    private NotificationGroupService notificationGroupService;

    private static final String GROUP_NAME = "groupName";

    private List<NotificationGroup> createGroups(final int count, final String property, final String value) {
        List<NotificationGroup> groups = new ArrayList<NotificationGroup>(count);
        for (int i = 0; i < count; i++) {
            NotificationGroup grp = FACTORY.manufacturePojo(NotificationGroup.class);
            grp.setId(null);
            try {
                BeanUtils.setProperty(grp, property, value);
            } catch (Exception e) {
                throw new MAException("error with data setup.", e);
            }
            notificationGroupService.save(grp);
            groups.add(grp);
        }
        return groups;

    }

    @Test
    public void testStringFilters() throws IllegalAccessException, InvocationTargetException, NoSuchMethodException {

        createGroups(1, GROUP_NAME, "Nirvana");
        createGroups(2, GROUP_NAME, "Led Zeppelin");

        Map<String, String[]> requestMap = new HashMap<String, String[]>();
        requestMap.put(GROUP_NAME, new String[] { "Led Zeppelin" });

        NotificationGroupSearchRequest searchRequest = new NotificationGroupSearchRequest(requestMap);

        SearchResponse<NotificationGroup> response = notificationGroupService.search(searchRequest);

        assertEquals("wrong response count for filter group", 2, response.getReturnCount());
        assertEquals("wrong number of results count group", 2, response.getSearchResults().size());
        for (NotificationGroup result : response.getSearchResults()) {
            assertEquals("search did not filter objects correctly", "Led Zeppelin", result.getGroupName());
        }

        requestMap.put(GROUP_NAME, new String[] { "The Who" });

        searchRequest = new NotificationGroupSearchRequest(requestMap);
        response = notificationGroupService.search(searchRequest);
        assertEquals("No pinball here", 0, response.getReturnCount());
        assertEquals("who are you??", 0, response.getSearchResults().size());

    }
}
