/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.monitoringalerting.service;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.assertNotNull;

import java.lang.reflect.InvocationTargetException;
import java.util.Arrays;
import java.util.List;
import java.util.Map;

import org.joda.time.DateTime;
import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.shared.monitoringalerting.AbstractPersistenceEmbeddedTest;
import org.opentestsystem.shared.monitoringalerting.domain.Alert;
import org.opentestsystem.shared.monitoringalerting.domain.Notification;
import org.opentestsystem.shared.monitoringalerting.domain.NotificationGroup;
import org.opentestsystem.shared.monitoringalerting.domain.NotificationRule;
import org.opentestsystem.shared.monitoringalerting.domain.NotificationRuleType;
import org.opentestsystem.shared.monitoringalerting.persistence.NotificationRuleRepository;
import org.springframework.beans.factory.annotation.Autowired;

@SuppressWarnings({ "PMD.GodClass" })
public class AlertNotificationServiceTest extends AbstractPersistenceEmbeddedTest {

    @Autowired
    private NotificationService<Alert> alertNotificationService;

    @Autowired
    private NotificationRuleRepository notificationRuleRepository;

    private static final String PACKER_PLAYER = "AaronRodgers@domain.com";

    private static final String BADGER_PLAYER = "JJWatt@domain.com";

    private static final String EX_PACKER_PLAYER = "bart.starr@domain.com";

    private Map<String, NotificationGroup> groups;

    private static final String NODE_NAME_EXPECTED = "should find node name";
    private static final String ALERT_NOTIF = "Alert Notification";
    private static final String INFO = "INFO";
    private static final String SERVER_NODE_2 = "aServerNode2";
    private static final String NOTIF_EXPECT_2 = "should produce 2 notifications";
    private static final String PERSON_NOT_FOUND = "person not found on address to ";

    @Before
    public void setupTestNotificationSettings() {
        groups = setupTestNotificationGroups();
        NotificationGroup packers = groups.get("Packers");
        NotificationGroup badgers = groups.get("Badgers");
        NotificationGroup inactivePackers = groups.get("inactivePackers");

        NotificationRule rule1 = new NotificationRule();
        rule1.setActive(true);
        rule1.setRuleType(NotificationRuleType.ALERT);
        rule1.setAttribute("alertType");
        rule1.setRegex("TIB_MSG");
        rule1.setNotificationGroups(Arrays.asList(new NotificationGroup[] { packers }));
        notificationRuleRepository.save(rule1);

        NotificationRule rule2 = new NotificationRule();
        rule2.setActive(true);
        rule2.setRuleType(NotificationRuleType.ALERT);
        rule2.setAttribute("message");
        rule2.setRegex("Items Imported.*");
        rule2.setNotificationGroups(Arrays.asList(new NotificationGroup[] { badgers, inactivePackers }));
        notificationRuleRepository.save(rule2);

        NotificationRule rule3 = new NotificationRule();
        rule3.setActive(true);
        rule3.setRuleType(NotificationRuleType.ALERT);
        rule3.setAttribute("message");
        rule3.setRegex(".*Import Error.*");
        rule3.setNotificationGroups(Arrays.asList(new NotificationGroup[] { badgers, packers, inactivePackers }));
        notificationRuleRepository.save(rule3);

        NotificationRule rule5 = new NotificationRule();
        rule5.setActive(false);
        rule5.setRuleType(NotificationRuleType.ALERT);
        rule5.setAttribute("message");
        rule5.setRegex(".*inactive rule.*");
        rule5.setNotificationGroups(Arrays.asList(new NotificationGroup[] { badgers, packers }));
        notificationRuleRepository.save(rule5);

    }

    @Test
    public void testAlertTypeRule() throws IllegalAccessException, InvocationTargetException, NoSuchMethodException {
        Alert alert = new Alert();
        alert.setInsertTimestamp(new DateTime());
        alert.setAlertType("TIB_MSG");
        alert.setMessage("Alert Dude");
        alert.setNode("aServerNode");
        alert.setSeverity("ERROR");
        alertNotificationService.processNotifications(alert);

        List<Notification> notifications = mongoTemplate.findAll(Notification.class);
        assertEquals("should produce 1 notification", 1, notifications.size());

        Notification notification = notifications.get(0);
        assertTrue("should find a packer", notification.getAddresses().contains(PACKER_PLAYER));
        assertFalse("should not find a badger", notification.getAddresses().contains(BADGER_PLAYER));
        assertEquals(NODE_NAME_EXPECTED, ALERT_NOTIF, notification.getSubject());
        assertEquals("wrong content", "Alert Dude", notification.getContent());
        assertNotNull(notification.getInsertTimestamp());
    }

    @Test
    public void testDebugRule() throws IllegalAccessException, InvocationTargetException, NoSuchMethodException {
        Alert alert = new Alert();
        alert.setInsertTimestamp(new DateTime());
        alert.setMessage("Debug Me");
        alert.setNode("aNode2");
        alert.setSeverity(INFO);
        alert.setMessage("Items Imported Successfully.  10 Items Created.");
        alertNotificationService.processNotifications(alert);

        List<Notification> notifications = mongoTemplate.findAll(Notification.class);
        assertEquals("should produce 1 notification", 1, notifications.size());

        Notification notification = notifications.get(0);
        assertFalse("should find a packer", notification.getAddresses().contains(PACKER_PLAYER));
        assertTrue("should not find a badger", notification.getAddresses().contains(BADGER_PLAYER));
        assertEquals(NODE_NAME_EXPECTED, ALERT_NOTIF, notification.getSubject());
        assertEquals("wrong content", "Items Imported Successfully.  10 Items Created.", notification.getContent());
    }

    @Test
    public void testImportErrorRule() throws IllegalAccessException, InvocationTargetException, NoSuchMethodException {
        Alert alert = new Alert();
        alert.setInsertTimestamp(new DateTime());
        alert.setMessage("super error");
        alert.setNode(SERVER_NODE_2);
        alert.setSeverity("FATAL");
        alert.setMessage("Woooha Import Error this is not good!");
        alertNotificationService.processNotifications(alert);

        List<Notification> notifications = mongoTemplate.findAll(Notification.class);
        assertEquals(NOTIF_EXPECT_2, 2, notifications.size());

        StringBuilder msgTo = new StringBuilder("");
        for (Notification notification : notifications) {
            msgTo.append(notification.getAddresses());
            assertEquals(NODE_NAME_EXPECTED, ALERT_NOTIF, notification.getSubject());
            assertEquals("should find message", "Woooha Import Error this is not good!", notification.getContent());
        }
        assertTrue(PERSON_NOT_FOUND, msgTo.toString().contains(PACKER_PLAYER));
        assertTrue(PERSON_NOT_FOUND, msgTo.toString().contains(BADGER_PLAYER));
    }

    @Test
    public void testBothRules() throws IllegalAccessException, InvocationTargetException, NoSuchMethodException {
        Alert alert = new Alert();
        alert.setInsertTimestamp(new DateTime());
        alert.setAlertType("TIB_MSG");
        alert.setMessage("super error");
        alert.setNode(SERVER_NODE_2);
        alert.setSeverity("FATAL");
        alert.setMessage("Items Imported! Good stuff man");
        alertNotificationService.processNotifications(alert);

        List<Notification> notifications = mongoTemplate.findAll(Notification.class);
        assertEquals(NOTIF_EXPECT_2, 2, notifications.size());

        StringBuilder msgTo = new StringBuilder("");
        for (Notification notification : notifications) {
            msgTo.append(notification.getAddresses());
            assertEquals(NODE_NAME_EXPECTED, ALERT_NOTIF, notification.getSubject());
            assertTrue("should find message", notification.getContent().contains("Items Imported! Good stuff man"));
        }
        assertTrue(PERSON_NOT_FOUND, msgTo.toString().contains(BADGER_PLAYER));
        assertTrue(PERSON_NOT_FOUND, msgTo.toString().contains(PACKER_PLAYER));

    }

    @Test
    public void testInactiveRules() throws IllegalAccessException, InvocationTargetException, NoSuchMethodException {
        Alert alert = new Alert();
        alert.setInsertTimestamp(new DateTime());
        alert.setAlertType("someCrazyType");
        alert.setNode(SERVER_NODE_2);
        alert.setSeverity(INFO);
        alert.setMessage("this is an inactive rule dude");

        alertNotificationService.processNotifications(alert);

        List<Notification> notifications = mongoTemplate.findAll(Notification.class);
        assertEquals("should produce 0 notifications", 0, notifications.size());

        List<NotificationRule> inactiveRules = notificationRuleRepository.findByActive(false);
        NotificationRule inactiveRule = inactiveRules.get(0);
        inactiveRule.setActive(true);
        notificationRuleRepository.save(inactiveRule);
        // now it is active recheck
        alertNotificationService.processNotifications(alert);
        notifications = mongoTemplate.findAll(Notification.class);
        assertEquals(NOTIF_EXPECT_2, 2, notifications.size());
    }

    @Test
    public void testInactiveGroups() throws IllegalAccessException, InvocationTargetException, NoSuchMethodException {
        Alert alert = new Alert();
        alert.setInsertTimestamp(new DateTime());
        alert.setAlertType("someCrazyType");
        alert.setMessage("rut row raggy Import Error !");
        alert.setNode(SERVER_NODE_2);
        alert.setSeverity(INFO);

        alertNotificationService.processNotifications(alert);

        List<Notification> notifications = mongoTemplate.findAll(Notification.class);
        assertEquals(NOTIF_EXPECT_2, 2, notifications.size());
        // badgers and packers

        NotificationGroup inactivePackers = groups.get("inactivePackers");
        inactivePackers.setActive(true);
        mongoTemplate.save(inactivePackers);

        alertNotificationService.processNotifications(alert);

        notifications = mongoTemplate.findAll(Notification.class);

        // 2 from the original call, 3 from the second call
        // 1. badgers and packers // 2. badgers and packers and inactive packers
        assertEquals("should produce 5 notifications", 5, notifications.size());

        int badgerCount = 0;
        int packerCount = 0;
        int exPackerCount = 0;
        for (Notification notification : notifications) {
            if (notification.getAddresses().contains(BADGER_PLAYER)) {
                badgerCount++;
            } else if (notification.getAddresses().contains(PACKER_PLAYER)) {
                packerCount++;
            } else if (notification.getAddresses().contains(EX_PACKER_PLAYER)) {
                exPackerCount++;
            }
        }
        assertEquals("wrong number of badgers", 2, badgerCount);
        assertEquals("wrong number of packers", 2, packerCount);
        assertEquals("wrong number of packers", 1, exPackerCount);

    }

    @Test
    public void testDeletedGroups() throws IllegalAccessException, InvocationTargetException, NoSuchMethodException {
        Alert alert = new Alert();
        alert.setInsertTimestamp(new DateTime());
        alert.setAlertType("someCrazyType");
        alert.setMessage("rut row raggy Import Error !");
        alert.setNode(SERVER_NODE_2);
        alert.setSeverity(INFO);

        alertNotificationService.processNotifications(alert);

        List<Notification> notifications = mongoTemplate.findAll(Notification.class);
        assertEquals(NOTIF_EXPECT_2, 2, notifications.size());
        // badgers and packers

        NotificationGroup badgers = groups.get("Badgers");
        // those guys went to the NFL... we wish them luck and still root for them!
        mongoTemplate.remove(badgers);

        alertNotificationService.processNotifications(alert);

        notifications = mongoTemplate.findAll(Notification.class);

        int badgerCount = 0;
        int packerCount = 0;
        for (Notification notification : notifications) {
            if (notification.getAddresses().contains(BADGER_PLAYER)) {
                badgerCount++;
            } else if (notification.getAddresses().contains(PACKER_PLAYER)) {
                packerCount++;
            }

        }
        // 1st call 1 badger 1 packer, 2nd call 1 packer
        assertEquals("wrong number of badgers", 1, badgerCount);
        assertEquals("wrong number of packers", 2, packerCount);
        assertEquals("should produce 3 notifications", 3, notifications.size());

    }

}
