/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.monitoringalerting;

import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import org.junit.After;
import org.junit.runner.RunWith;
import org.opentestsystem.shared.monitoringalerting.domain.NotificationGroup;
import org.opentestsystem.shared.monitoringalerting.persistence.NotificationGroupRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.data.mongodb.core.query.Query;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import uk.co.jemos.podam.api.PodamFactory;
import uk.co.jemos.podam.api.PodamFactoryImpl;

import com.mongodb.MongoClient;
import de.flapdoodle.embed.mongo.MongodStarter;
import de.flapdoodle.embed.mongo.distribution.Version;
import de.flapdoodle.embed.mongo.config.MongodConfigBuilder;
import de.flapdoodle.embed.mongo.config.Net;

@SuppressWarnings({ "PMD.AbstractClassWithoutAbstractMethod", "PMD.AvoidInstantiatingObjectsInLoops", "PMD.UseConcurrentHashMap" })
@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations = { "classpath:test-loadprops-context.xml", "classpath:service-context.xml"})
public abstract class AbstractPersistenceEmbeddedTest {

    private static final int MONGO_TEST_PORT = 55550;

    private static final String SYSTEM_INDEX_STRING = "system.indexes";

    // setup our embedded mongo once for this jvm
    static {
        try {
            MongodStarter.getDefaultInstance().prepare(new MongodConfigBuilder()
                    .version(Version.Main.PRODUCTION)
                    .net(new Net("localhost", MONGO_TEST_PORT, false))
                    .build()).start();
        } catch (Exception e) {
            new RuntimeException("something went wrong", e);
        }
    }

    @Autowired
    protected MongoTemplate mongoTemplate;

    protected static final PodamFactory FACTORY = new PodamFactoryImpl();

    @Autowired
    protected NotificationGroupRepository notificationGroupRepository;

    @After
    public void dropCollections() {
        for (String collectionName : mongoTemplate.getCollectionNames()) {
            if (!SYSTEM_INDEX_STRING.equals(collectionName)) {
                // disregard PMD warning for object instantiation
                mongoTemplate.remove(new Query(), collectionName);
            }
        }
    }

    protected Map<String, NotificationGroup> setupTestNotificationGroups() {
        // disregard PMD concurrent map warning
        Map<String, NotificationGroup> groups = new HashMap<String, NotificationGroup>();
        NotificationGroup grp1 = new NotificationGroup();
        grp1.setGroupName("Packers");
        grp1.setActive(true);
        grp1.setMemberNames(Arrays.asList(new String[] { "AaronRodgers@domain.com", "ClayMatthews@domain.com" }));
        notificationGroupRepository.save(grp1);

        NotificationGroup grp2 = new NotificationGroup();
        grp2.setActive(true);
        grp2.setGroupName("Badgers");
        grp2.setMemberNames(Arrays.asList(new String[] { "JJWatt@domain.com", "RussellWilson@domain.com" }));
        notificationGroupRepository.save(grp2);

        NotificationGroup grp3 = new NotificationGroup();
        grp3.setActive(true);
        grp3.setGroupName("Brewers");
        grp3.setMemberNames(Arrays.asList(new String[] { "RyanBraun@domain.com", "RickieWeeks@domain.com" }));
        notificationGroupRepository.save(grp3);

        NotificationGroup grp4 = new NotificationGroup();
        grp4.setActive(false);
        grp4.setGroupName("inactivePackers");
        grp4.setMemberNames(Arrays.asList(new String[] { "bart.starr@domain.com", "reggie.white@domain.com", "brett.favre@domain.com" }));
        notificationGroupRepository.save(grp4);

        groups.put(grp1.getGroupName(), grp1);
        groups.put(grp2.getGroupName(), grp2);
        groups.put(grp3.getGroupName(), grp3);
        groups.put(grp4.getGroupName(), grp4);
        return groups;
    }

}
