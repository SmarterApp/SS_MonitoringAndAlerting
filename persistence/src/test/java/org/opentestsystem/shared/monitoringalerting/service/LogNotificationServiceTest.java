/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.monitoringalerting.service;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import java.lang.reflect.InvocationTargetException;
import java.util.Arrays;
import java.util.List;
import java.util.Map;

import org.joda.time.DateTime;
import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.shared.monitoringalerting.AbstractPersistenceEmbeddedTest;
import org.opentestsystem.shared.monitoringalerting.domain.Log;
import org.opentestsystem.shared.monitoringalerting.domain.Notification;
import org.opentestsystem.shared.monitoringalerting.domain.NotificationGroup;
import org.opentestsystem.shared.monitoringalerting.domain.NotificationRule;
import org.opentestsystem.shared.monitoringalerting.domain.NotificationRuleType;
import org.opentestsystem.shared.monitoringalerting.persistence.NotificationRuleRepository;
import org.springframework.beans.factory.annotation.Autowired;

@SuppressWarnings({ "PMD.ProperLogger" })
public class LogNotificationServiceTest extends AbstractPersistenceEmbeddedTest {

    @Autowired
    private NotificationService<Log> logNotificationService;

    @Autowired
    private NotificationRuleRepository notificationRuleRepository;

    private static final String PACKER_PLAYER = "AaronRodgers@domain.com";

    private static final String BADGER_PLAYER = "JJWatt@domain.com";

    private static final String BREWER_PLAYER = "RyanBraun@domain.com";

    private static final String SHOULD_FIND_PACKER = "should find a packer";
    private static final String SHOULD_NOT_FIND_BREWER = "should not find a brewer";
    private static final String SHOULD_FIND_MESSAGE = "should find message";

    @Before
    public void setupTestNotificationSettings() {
        Map<String, NotificationGroup> groups = setupTestNotificationGroups();
        NotificationGroup packers = groups.get("Packers");
        NotificationGroup badgers = groups.get("Badgers");
        NotificationGroup brewers = groups.get("Brewers");

        NotificationRule rule1 = new NotificationRule();
        rule1.setActive(true);
        rule1.setRuleType(NotificationRuleType.LOG);
        rule1.setAttribute("severity");
        rule1.setRegex("ERROR");
        rule1.setNotificationGroups(Arrays.asList(new NotificationGroup[] { packers }));
        notificationRuleRepository.save(rule1);

        NotificationRule rule2 = new NotificationRule();
        rule2.setActive(true);
        rule2.setRuleType(NotificationRuleType.LOG);
        rule2.setAttribute("severity");
        rule2.setRegex("DEBUG");
        rule2.setNotificationGroups(Arrays.asList(new NotificationGroup[] { badgers }));
        notificationRuleRepository.save(rule2);

        NotificationRule rule3 = new NotificationRule();
        rule3.setActive(true);
        rule3.setRuleType(NotificationRuleType.LOG);
        rule3.setAttribute("stackTrace");
        rule3.setRegex(".*PermGen.*");
        rule3.setNotificationGroups(Arrays.asList(new NotificationGroup[] { badgers, packers }));
        notificationRuleRepository.save(rule3);

        NotificationRule rule4 = new NotificationRule();
        rule4.setActive(true);
        rule4.setRuleType(NotificationRuleType.ALERT);
        rule4.setAttribute("stackTrace");
        rule4.setRegex(".*PermGen.*");
        rule4.setNotificationGroups(Arrays.asList(new NotificationGroup[] { brewers }));
        notificationRuleRepository.save(rule4);

        NotificationRule emptyRegex = new NotificationRule();
        emptyRegex.setActive(true);
        emptyRegex.setRuleType(NotificationRuleType.LOG);
        emptyRegex.setAttribute("server");
        emptyRegex.setRegex("^$");
        emptyRegex.setNotificationGroups(Arrays.asList(new NotificationGroup[] { packers }));
        notificationRuleRepository.save(emptyRegex);

        NotificationRule emptyRegex2 = new NotificationRule();
        emptyRegex2.setActive(true);
        emptyRegex2.setRuleType(NotificationRuleType.LOG);
        emptyRegex2.setAttribute("node");
        emptyRegex2.setRegex("");
        emptyRegex2.setNotificationGroups(Arrays.asList(new NotificationGroup[] { brewers }));
        notificationRuleRepository.save(emptyRegex2);

    }

    @Test
    public void testErrorRule() throws IllegalAccessException, InvocationTargetException, NoSuchMethodException {
        Log log = new Log();
        log.setInsertTimestamp(new DateTime());
        log.setMessage("Error Dude");
        log.setNode("aServerNode");
        log.setSeverity("ERROR");
        log.setStackTrace("an Error line 32 in file.java");
        logNotificationService.processNotifications(log);

        List<Notification> notifications = mongoTemplate.findAll(Notification.class);
        assertEquals("should produce 1 notification", 1, notifications.size());

        Notification notification = notifications.get(0);
        assertTrue(SHOULD_FIND_PACKER, notification.getAddresses().contains(PACKER_PLAYER));
        assertFalse("should not find a badger", notification.getAddresses().contains(BADGER_PLAYER));
        assertFalse(SHOULD_NOT_FIND_BREWER, notification.getAddresses().contains(BREWER_PLAYER));
        assertTrue("should find node name", notification.getContent().contains("aservernode"));
        assertTrue("should find stacktrace", notification.getContent().contains("line 32 in file.java"));
    }

    @Test
    public void testDebugRule() throws IllegalAccessException, InvocationTargetException, NoSuchMethodException {
        Log log = new Log();
        log.setInsertTimestamp(new DateTime());
        log.setMessage("Debug Me");
        log.setNode("aNode2");
        log.setSeverity("DEBUG");
        log.setMessage("a cool msg");
        logNotificationService.processNotifications(log);

        List<Notification> notifications = mongoTemplate.findAll(Notification.class);
        assertEquals("should produce 1 notification", 1, notifications.size());

        Notification notification = notifications.get(0);
        assertFalse("should not find a packer", notification.getAddresses().contains(PACKER_PLAYER));
        assertTrue("should find a badger", notification.getAddresses().contains(BADGER_PLAYER));
        assertFalse(SHOULD_NOT_FIND_BREWER, notification.getAddresses().contains(BREWER_PLAYER));
        assertTrue("should find node name", notification.getContent().contains("anode2"));
        assertTrue(SHOULD_FIND_MESSAGE, notification.getContent().contains("a cool msg"));
    }

    @Test
    public void testPermGenRule() throws IllegalAccessException, InvocationTargetException, NoSuchMethodException {
        Log log = new Log();
        log.setInsertTimestamp(new DateTime());
        log.setMessage("super error");
        log.setNode("aServerNode2");
        log.setSeverity("FATAL");
        log.setStackTrace("java.lang.OutOfMemoryError: PermGen space");
        logNotificationService.processNotifications(log);

        List<Notification> notifications = mongoTemplate.findAll(Notification.class);
        assertEquals("should produce 2 notifications", 2, notifications.size());

        StringBuilder msgToBuffer = new StringBuilder("");
        for (Notification notification : notifications) {
            msgToBuffer.append(notification.getAddresses());
            assertTrue("should find node name", notification.getContent().contains("aservernode"));
            assertTrue(SHOULD_FIND_MESSAGE, notification.getContent().contains("java.lang.OutOfMemoryError: PermGen space"));
        }
        String msgTo = msgToBuffer.toString();
        assertTrue(SHOULD_FIND_PACKER, msgTo.contains(PACKER_PLAYER));
        assertTrue("should find a badger", msgTo.contains(BADGER_PLAYER));
        assertFalse(SHOULD_NOT_FIND_BREWER, msgTo.contains(BREWER_PLAYER));

    }

    @Test
    public void testEmptyRegexRule() throws IllegalAccessException, InvocationTargetException, NoSuchMethodException {
        Log log = new Log();
        log.setInsertTimestamp(new DateTime());
        log.setMessage("super error");
        log.setServer("");
        log.setNode("adsf");
        log.setSeverity("FATAL");
        log.setStackTrace("where did I come from?");
        logNotificationService.processNotifications(log);

        List<Notification> notifications = mongoTemplate.findAll(Notification.class);
        assertEquals("should produce 1 notifications", 1, notifications.size());

        StringBuilder msgToBuffer = new StringBuilder("");
        for (Notification notification : notifications) {
            msgToBuffer.append(notification.getAddresses());
            assertTrue(SHOULD_FIND_MESSAGE, notification.getContent().contains("where did I come from?"));
        }

        String msgTo = msgToBuffer.toString();
        assertTrue(SHOULD_FIND_PACKER, msgTo.contains(PACKER_PLAYER));
        assertFalse("should not find a badger", msgTo.contains(BADGER_PLAYER));
        assertFalse(SHOULD_NOT_FIND_BREWER, msgTo.contains(BREWER_PLAYER));

    }

    @Test
    public void testEmptyStringRegexRule() throws IllegalAccessException, InvocationTargetException, NoSuchMethodException {
        Log log = new Log();
        log.setInsertTimestamp(new DateTime());
        log.setMessage("super error");
        log.setServer("asd");
        log.setNode("");
        log.setSeverity("FATAL");
        log.setStackTrace("what node did I come from?");
        logNotificationService.processNotifications(log);

        List<Notification> notifications = mongoTemplate.findAll(Notification.class);
        assertEquals("should produce 1 notifications", 1, notifications.size());

        StringBuilder msgToBuffer = new StringBuilder("");
        for (Notification notification : notifications) {
            msgToBuffer.append(notification.getAddresses());
            assertTrue(SHOULD_FIND_MESSAGE, notification.getContent().contains("what node did I come from?"));
        }

        String msgTo = msgToBuffer.toString();
        assertFalse(SHOULD_FIND_PACKER, msgTo.contains(PACKER_PLAYER));
        assertFalse("should not find a badger", msgTo.contains(BADGER_PLAYER));
        assertTrue(SHOULD_NOT_FIND_BREWER, msgTo.contains(BREWER_PLAYER));

    }

}
