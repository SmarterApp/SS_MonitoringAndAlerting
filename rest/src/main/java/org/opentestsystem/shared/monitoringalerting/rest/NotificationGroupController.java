/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.monitoringalerting.rest;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;

import org.opentestsystem.shared.exception.RestException;
import org.opentestsystem.shared.monitoringalerting.domain.NotificationGroup;
import org.opentestsystem.shared.monitoringalerting.domain.search.NotificationGroupSearchRequest;
import org.opentestsystem.shared.monitoringalerting.gateway.NotificationGroupService;
import org.opentestsystem.shared.search.domain.SearchResponse;
import org.opentestsystem.shared.web.AbstractRestController;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

@SuppressWarnings({ "PMD.ShortVariable" })
@Controller
public class NotificationGroupController extends AbstractRestController {

    @Autowired
    private NotificationGroupService notificationGroupService;

    @RequestMapping(value = "/notificationGroup", method = RequestMethod.POST, consumes = MediaType.APPLICATION_JSON_VALUE)
    @ResponseBody
    public NotificationGroup createGroup(@RequestBody @Valid final NotificationGroup group, final HttpServletResponse response) {
        NotificationGroup newGroup = notificationGroupService.save(group);
        response.setStatus(HttpStatus.CREATED.value());
        response.setHeader("Location", newGroup.getUrl());
        return newGroup;
    }

    @RequestMapping(value = "/notificationGroup/{id}", method = RequestMethod.PUT, produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseBody
    public NotificationGroup updateNotificationGroup(@PathVariable("id") final String id, @RequestBody @Valid final NotificationGroup group, final HttpServletResponse response) {
        group.setId(id);
        NotificationGroup newGroup = notificationGroupService.save(group);
        response.setStatus(HttpStatus.CREATED.value());
        return newGroup;
    }

    @RequestMapping(value = "/notificationGroup/{id}", method = RequestMethod.GET)
    @ResponseBody
    public NotificationGroup getGroupById(@PathVariable("id") final String id, final HttpServletResponse response) {
        NotificationGroup grp = notificationGroupService.findById(id);
        response.setStatus(HttpStatus.OK.value());
        return grp;
    }

    @RequestMapping(value = "/notificationGroup", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseBody
    public SearchResponse<NotificationGroup> searchForNotificationGroup(final HttpServletRequest request, final HttpServletResponse response) {
        NotificationGroupSearchRequest searchRequest = new NotificationGroupSearchRequest(request.getParameterMap());
        SearchResponse<NotificationGroup> searchResponse;
        if (searchRequest.isValid()) {
            searchResponse = notificationGroupService.search(searchRequest);
        } else {
            throw new RestException("item.search.invalidSearchCriteria");
        }
        return searchResponse;
    }

    @RequestMapping(value = "/notificationGroup/{id}", method = RequestMethod.DELETE, produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseBody
    public void delete(@PathVariable("id") final String id, final HttpServletResponse response) {
        notificationGroupService.delete(id);
        response.setStatus(HttpStatus.NO_CONTENT.value());
    }

}
