/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.monitoringalerting.rest;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;

import org.opentestsystem.shared.exception.RestException;
import org.opentestsystem.shared.monitoringalerting.domain.Metric;
import org.opentestsystem.shared.monitoringalerting.domain.search.MetricSearchRequest;
import org.opentestsystem.shared.monitoringalerting.gateway.MetricService;
import org.opentestsystem.shared.search.domain.SearchResponse;
import org.opentestsystem.shared.web.AbstractRestController;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.security.access.annotation.Secured;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.client.RestOperations;

/**
 * REST API for Metrics
 */
@SuppressWarnings({ "PMD.ShortVariable", "PMD.AvoidCatchingGenericException" })
@Controller
public class MetricController extends AbstractRestController {

    /** logger **/
    private static final Logger LOGGER = LoggerFactory.getLogger(MetricController.class);

    @Autowired
    private MetricService metricService;

    @Autowired
    private RestOperations restTemplate;

    /**
     * Create a metric
     * 
     * @param metricInput
     * @return
     */
    @RequestMapping(value = "/metric", method = RequestMethod.POST, consumes = MediaType.APPLICATION_JSON_VALUE)
    @Secured({ "ROLE_Mna Modify" })
    @ResponseBody
    public Metric createMetric(@RequestBody @Valid final Metric metricInput, final HttpServletResponse response) {
        LOGGER.debug("in create metric: input = " + metricInput.toString());
        final Metric retMetric = this.metricService.addMetric(metricInput);

        response.setStatus(HttpStatus.CREATED.value());
        response.setHeader("Location", retMetric.getUrl());
        return retMetric;
    }

    /**
     * Getting an metric by id is a synchronous call.
     * 
     * @param id
     * @return
     */
    @RequestMapping(value = "/metric/{id}", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    @Secured({ "ROLE_Mna Read" })
    @ResponseBody
    public Metric getOneMetricById(@PathVariable("id") final String id, final HttpServletResponse response) {
        response.setStatus(HttpStatus.NOT_IMPLEMENTED.value());
        return null;
    }

    /**
     * Can query the /metric endpoint with query parameters in a querystring. or with JSON Valid parameters are: source
     * (wildcarded), type, name, server, node, since (timestamp), between (timestamp 'and' timestamp)
     * 
     * @param request
     * @return
     */
    @RequestMapping(value = "/metric", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    @Secured({ "ROLE_Mna Read" })
    @ResponseBody
    public SearchResponse<Metric> searchForMetrics(final HttpServletRequest request, final HttpServletResponse response) {
        final MetricSearchRequest searchRequest = new MetricSearchRequest(request.getParameterMap());
        SearchResponse<Metric> searchResponse;
        if (searchRequest.isValid()) {
            searchResponse = this.metricService.searchMetrics(searchRequest);
        } else {
            throw new RestException("item.search.invalidSearchCriteria");
        }
        return searchResponse;
    }

}
