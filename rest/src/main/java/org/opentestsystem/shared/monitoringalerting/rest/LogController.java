/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.monitoringalerting.rest;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;

import org.opentestsystem.shared.exception.RestException;
import org.opentestsystem.shared.monitoringalerting.domain.Log;
import org.opentestsystem.shared.monitoringalerting.domain.search.LogSearchRequest;
import org.opentestsystem.shared.monitoringalerting.domain.search.RangedSearchResponse;
import org.opentestsystem.shared.monitoringalerting.gateway.LogService;
import org.opentestsystem.shared.web.AbstractRestController;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

/**
 * REST API for Logs
 */
@Controller
public class LogController extends AbstractRestController {

    /** logger **/
    private static final Logger LOGGER = LoggerFactory.getLogger(LogController.class);

    @Autowired
    private LogService logService;

    /**
     * Create a Log
     * 
     * @param logInput
     * @return
     */
    @RequestMapping(value = "/log", method = RequestMethod.POST, consumes = MediaType.APPLICATION_JSON_VALUE)
    @ResponseBody
    public Log createLog(@RequestBody @Valid final Log logInput, final HttpServletResponse response) {
        LOGGER.debug("in create log: input = " + logInput.toString());
        final Log retLog = this.logService.addLog(logInput);
        response.setHeader("Location", retLog.getUrl());
        response.setStatus(HttpStatus.CREATED.value());
        return retLog;
    }

    /**
     * Can query the /log endpoint with query parameters in a querystring or with JSON. Valid parameters are: source
     * (wildcarded), level, message, server, node, since (timestamp), between (timestamp 'and' timestamp)
     * 
     * @param request
     * @return
     */
    @RequestMapping(value = "/log", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseBody
    public RangedSearchResponse<Log> searchForLog(final HttpServletRequest request, final HttpServletResponse response) {
        final LogSearchRequest searchRequest = new LogSearchRequest(request.getParameterMap());
        RangedSearchResponse<Log> searchResponse;
        if (searchRequest.isValid()) {
            searchResponse = this.logService.searchLogs(searchRequest);
        } else {
            throw new RestException("log.search.invalidSearchCriteria");
        }
        return searchResponse;
    }
}
