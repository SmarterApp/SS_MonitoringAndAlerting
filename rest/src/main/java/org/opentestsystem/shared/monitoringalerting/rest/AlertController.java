/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.monitoringalerting.rest;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;

import org.opentestsystem.shared.exception.RestException;
import org.opentestsystem.shared.monitoringalerting.domain.Alert;
import org.opentestsystem.shared.monitoringalerting.domain.search.AlertSearchRequest;
import org.opentestsystem.shared.monitoringalerting.gateway.AlertService;
import org.opentestsystem.shared.search.domain.SearchResponse;
import org.opentestsystem.shared.web.AbstractRestController;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

/**
 * Top level REST API for working with Alerts
 */
@Controller
public class AlertController extends AbstractRestController {

    /** logger. **/
    private static final Logger LOGGER = LoggerFactory.getLogger(AlertController.class);

    @Autowired
    private AlertService alertService;

    /**
     * Create an alert.
     * 
     * @param alertInput
     * @return
     */
    @RequestMapping(value = "/alert", method = RequestMethod.POST, consumes = MediaType.APPLICATION_JSON_VALUE, produces = { MediaType.APPLICATION_JSON_VALUE })
    @ResponseBody
    public Alert createAlert(@RequestBody @Valid final Alert alertInput, final HttpServletResponse response) {
        LOGGER.debug("in create alert: input = " + alertInput.toString());
        Alert retAlert = alertService.addAlert(alertInput);
        response.setHeader("Location", retAlert.getUrl());
        response.setStatus(HttpStatus.CREATED.value());
        return retAlert;
    }

    /**
     * Can query the /alerts endpoint with query parameters in a querystring or with JSON Valid parameters are: source
     * (wildcarded), message (wildcarded), type, server, node, since (timestamp), between (timestamp 'and' timestamp)
     * 
     * @param request HttpServletRequest.
     * @param response HttpServletResponse.
     * @return
     */
    @RequestMapping(value = "/alert", method = RequestMethod.GET, produces = { MediaType.APPLICATION_JSON_VALUE })
    @ResponseBody
    public SearchResponse<Alert> searchForAlerts(final HttpServletRequest request, final HttpServletResponse response) {
        AlertSearchRequest searchRequest = new AlertSearchRequest(request.getParameterMap());
        SearchResponse<Alert> searchResponse;
        if (searchRequest.isValid()) {
            searchResponse = alertService.searchAlerts(searchRequest);
        } else {
            throw new RestException("item.search.invalidSearchCriteria");
        }
        return searchResponse;
    }

}
