/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.monitoringalerting.rest;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;

import org.opentestsystem.shared.exception.RestException;
import org.opentestsystem.shared.monitoringalerting.domain.NotificationRule;
import org.opentestsystem.shared.monitoringalerting.domain.search.NotificationRuleSearchRequest;
import org.opentestsystem.shared.monitoringalerting.gateway.NotificationRuleService;
import org.opentestsystem.shared.search.domain.SearchResponse;
import org.opentestsystem.shared.web.AbstractRestController;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

@SuppressWarnings({ "PMD.ShortVariable" })
@Controller
public class NotificationRuleController extends AbstractRestController {

    @Autowired
    private NotificationRuleService notificationRuleService;

    @RequestMapping(value = "/notificationRule", method = RequestMethod.POST, consumes = MediaType.APPLICATION_JSON_VALUE)
    @ResponseBody
    public NotificationRule createRule(@RequestBody @Valid final NotificationRule rule, final HttpServletResponse response) {
        NotificationRule newRule = notificationRuleService.save(rule);
        response.setStatus(HttpStatus.CREATED.value());
        response.setHeader("Location", newRule.getUrl());
        return newRule;
    }

    @RequestMapping(value = "/notificationRule/{id}", method = RequestMethod.PUT, produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseBody
    public NotificationRule updateRule(@PathVariable("id") final String id, @RequestBody @Valid final NotificationRule rule, final HttpServletResponse response) {
        rule.setId(id);
        NotificationRule newRule = notificationRuleService.save(rule);
        response.setStatus(HttpStatus.CREATED.value());
        return newRule;
    }

    @RequestMapping(value = "/notificationRule/{id}", method = RequestMethod.GET)
    @ResponseBody
    public NotificationRule getRule(@PathVariable("id") final String id, final HttpServletResponse response) {
        return notificationRuleService.findById(id);
    }

    @RequestMapping(value = "/notificationRule", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseBody
    public SearchResponse<NotificationRule> searchForNotificationGroup(final HttpServletRequest request, final HttpServletResponse response) {
        NotificationRuleSearchRequest searchRequest = new NotificationRuleSearchRequest(request.getParameterMap());
        SearchResponse<NotificationRule> searchResponse;
        if (searchRequest.isValid()) {
            searchResponse = notificationRuleService.search(searchRequest);
        } else {
            throw new RestException("item.search.invalidSearchCriteria");
        }
        return searchResponse;
    }

    @RequestMapping(value = "/notificationRule/{id}", method = RequestMethod.DELETE, produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseBody
    public void delete(@PathVariable("id") final String id, final HttpServletResponse response) {
        notificationRuleService.delete(id);
        response.setStatus(HttpStatus.NO_CONTENT.value());
    }
}
