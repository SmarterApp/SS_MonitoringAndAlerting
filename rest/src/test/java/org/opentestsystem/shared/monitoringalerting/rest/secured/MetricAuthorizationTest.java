/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * https://bitbucket.org/sbacoss/eotds/wiki/AIR_Open_Source_License
 ******************************************************************************/
package org.opentestsystem.shared.monitoringalerting.rest.secured;

import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.notNullValue;
import static org.hamcrest.CoreMatchers.nullValue;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import java.util.List;
import java.util.Map;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.shared.docs.annotation.ApiDocExample;
import org.opentestsystem.shared.monitoringalerting.domain.CategoryType;
import org.opentestsystem.shared.monitoringalerting.domain.MAAlternateKey;
import org.opentestsystem.shared.monitoringalerting.domain.Metric;
import org.opentestsystem.shared.monitoringalerting.gateway.MetricService;
import org.opentestsystem.shared.monitoringalerting.rest.AbstractSecuredRestEmbeddedMongoTest;
import org.opentestsystem.shared.monitoringalerting.rest.Permissions;
import org.springframework.beans.factory.annotation.Autowired;

import com.google.common.collect.Lists;

public class MetricAuthorizationTest extends AbstractSecuredRestEmbeddedMongoTest {
    private static final String METRIC_URL = "/metric";

    @Autowired
    private MetricService metricService;

    private List<Permissions> permissions;
    private Metric savedMetric;

    @ApiDocExample(rank = -1)
    @Before
    public void setupTestData() {
        permissions = Lists.newArrayList();
    }

    void setupMetric(final int uniqueId) {
        this.savedMetric = saveSampleMetric(uniqueId);
    }

    /**************************************** Metric ****************************************/
    @Test
    public void testMetricRead() {
        setupMetric(1);
        permissions.add(Permissions.MNA_READ);
        setUserWithRoles(permissions);
        final Metric fetchedMetric = callGETRestServiceNotImplemented(METRIC_URL + "/" + this.savedMetric.getId(), null);
        assertThat(fetchedMetric, is(nullValue()));
    }

    @Test
    public void testMetricModify() {
        permissions.add(Permissions.MNA_MODIFY);
        setUserWithRoles(permissions);
        final Map<String, Object> metricParams = buildMetricMap(0);
        metricParams.put("message", "New Message");
        final Metric updatedMetric = callPOSTRestService(METRIC_URL, metricParams, Metric.class);
        assertThat(updatedMetric, is(notNullValue()));
        assertThat(updatedMetric.getId(), is(notNullValue()));
    }

    @Test
    public void testMetricReadFail() {
        setupMetric(3);
        permissions.add(Permissions.MNA_MODIFY);
        setUserWithRoles(permissions);
        final Metric fetchedMetric = callGETRestService(METRIC_URL + "/" + this.savedMetric.getId(), Metric.class, status().isUnauthorized());
        assertThat(fetchedMetric, is(notNullValue()));
        assertThat(fetchedMetric.getId(), is(nullValue()));
    }

    @Test
    public void testMetricModifyFail() {
        permissions.add(Permissions.MNA_READ);
        setUserWithRoles(permissions);
        final Map<String, Object> metricParams = buildMetricMap(0);
        metricParams.put("message", "New Message");
        final Metric updatedMetric = callPOSTRestService(METRIC_URL, metricParams, Metric.class, status().isUnauthorized());
        assertThat(updatedMetric, is(notNullValue()));
    }

    /***********************************************************************************************/

    private Metric saveSampleMetric(final int uniqueId) {
        final Metric metric = PODAM_FACTORY.manufacturePojo(Metric.class);
        metric.setMetricType(CategoryType.AVAILABILITY);
        metric.setMetricValue(1);
        
        MAAlternateKey key = new MAAlternateKey();
        key.setComponent("componenet");
        key.setNode("aNode");
        key.setServer("serverName");
        metric.setAlternateKey(key);
        
        metric.setComponent("component");
        metric.setMessage("message");
        metric.setNode("node");
        metric.setServer("serverName");
        metric.setSeverity("ERROR");
        return this.metricService.addMetric(metric);
    }

    private Map<String, Object> buildMetricMap(final int uniqueId) {
        return buildParamObject(saveSampleMetric(uniqueId));
    }

}
