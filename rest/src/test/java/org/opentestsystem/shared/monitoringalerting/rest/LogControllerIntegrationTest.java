/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.monitoringalerting.rest;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.junit.Test;
import org.opentestsystem.shared.monitoringalerting.domain.Log;
import org.opentestsystem.shared.monitoringalerting.domain.MAAlternateKey;
import org.opentestsystem.shared.monitoringalerting.domain.search.RangedSearchResponse;

public class LogControllerIntegrationTest extends AbstractRestEmbeddedMongoTest {

    @Test
    public void postLogTest() throws InterruptedException {
        final HashMap<String, Object> params = new HashMap<String, Object>();
        params.put("message", "NullPointerException");
        params.put("stackTrace", "NPE Found Line 25 of foo.java... ... .. .. .. ");
        params.put("severity", "ERROR");

        final MAAlternateKey key = new MAAlternateKey();
        key.setComponent("componenet");
        key.setNode("aNode");
        key.setServer("serverName");
        params.put("alternateKey", key);

        final Log awk = callPOSTRestService("/log", params, Log.class);

        assertEquals("Log should be created", 1, this.mongoTemplate.findAll(Log.class).size());
        assertNotNull("Log object should not be null", awk);
    }

    @Test
    public void testLogSearchQuery() throws InterruptedException {
        final Log log = PODAM_FACTORY.manufacturePojo(Log.class);
        log.setId(null);

        this.mongoTemplate.insert(log);

        final HashMap<String, String> params = new HashMap<String, String>();
        params.put("component", log.getComponent());
        params.put("message", log.getMessage());
        params.put("severity", log.getSeverity());
        params.put("server", log.getServer());
        params.put("node", log.getNode());

        @SuppressWarnings("unchecked")
        final RangedSearchResponse<Log> response = callGETRestService("/log" + buildQueryString(params), RangedSearchResponse.class);

        assertEquals("search should return log object", 1, response.getSearchResults().size());
    }

    @Test
    public void insertInvalidAlert() throws InterruptedException {
        final HashMap<String, Object> params = new HashMap<String, Object>();
        final Map<String, List<String>> messages = callPOSTWithBadData("/log", params);

        assertTrue("error message correct", messages.get("alternateKey.server").get(0).endsWith("server.required"));
        assertTrue("error message correct", messages.get("alternateKey.node").get(0).endsWith("node.required"));
        assertTrue("error message correct", messages.get("alternateKey.component").get(0).endsWith("component.required"));
    }
}
