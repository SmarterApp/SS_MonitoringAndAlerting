/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.monitoringalerting.rest;

import java.net.URI;
import java.net.URISyntaxException;
import java.util.Map;
import java.util.Set;

import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.web.client.RequestCallback;
import org.springframework.web.client.ResponseExtractor;
import org.springframework.web.client.RestClientException;
import org.springframework.web.client.RestOperations;

@SuppressWarnings({ "PMD.TooManyMethods", "PMD.AvoidThrowingRawExceptionTypes", "PMD.AvoidPrintStackTrace" })
public class MockRestTemplate implements RestOperations {

    @Override
    public <T> T getForObject(final String url, final Class<T> responseType, final Object... uriVariables) throws RestClientException {

        return null;
    }

    @Override
    public <T> T getForObject(final String url, final Class<T> responseType, final Map<String, ?> uriVariables)
            throws RestClientException {
        return null;
    }

    @Override
    public <T> T getForObject(final URI url, final Class<T> responseType) throws RestClientException {
        return null;
    }

    @Override
    public <T> ResponseEntity<T> getForEntity(final String url, final Class<T> responseType, final Object... uriVariables)
            throws RestClientException {
        return null;
    }

    @Override
    public <T> ResponseEntity<T> getForEntity(final String url, final Class<T> responseType, final Map<String, ?> uriVariables)
            throws RestClientException {
        return null;
    }

    @Override
    public <T> ResponseEntity<T> getForEntity(final URI url, final Class<T> responseType) throws RestClientException {
        return null;
    }

    @Override
    public HttpHeaders headForHeaders(final String url, final Object... uriVariables) throws RestClientException {
        return null;
    }

    @Override
    public HttpHeaders headForHeaders(final String url, final Map<String, ?> uriVariables) throws RestClientException {
        return null;
    }

    @Override
    public HttpHeaders headForHeaders(final URI url) throws RestClientException {
        return null;
    }

    @Override
    public URI postForLocation(final String url, final Object request, final Object... uriVariables) throws RestClientException {
        try {
            postForObject(url, request, null).toString();
            return new URI("foo/url");
        } catch (final URISyntaxException e) {
            throw new RuntimeException(e);
        }
    }

    @Override
    public URI postForLocation(final String url, final Object request, final Map<String, ?> uriVariables) throws RestClientException {
        return null;
    }

    @Override
    public URI postForLocation(final URI url, final Object request) throws RestClientException {
        return null;
    }

    @Override
    public <T> T postForObject(final String url, final Object request, final Class<T> responseType, final Object... uriVariables)
            throws RestClientException {

        return null;
    }

    @Override
    public <T> T postForObject(final String url, final Object request, final Class<T> responseType, final Map<String, ?> uriVariables)
            throws RestClientException {
        return null;
    }

    @Override
    public <T> T postForObject(final URI url, final Object request, final Class<T> responseType) throws RestClientException {
        return null;
    }

    @Override
    public <T> ResponseEntity<T> postForEntity(final String url, final Object request, final Class<T> responseType,
            final Object... uriVariables) throws RestClientException {
        return null;
    }

    @Override
    public <T> ResponseEntity<T> postForEntity(final String url, final Object request, final Class<T> responseType,
            final Map<String, ?> uriVariables) throws RestClientException {
        return null;
    }

    @Override
    public <T> ResponseEntity<T> postForEntity(final URI url, final Object request, final Class<T> responseType)
            throws RestClientException {
        return null;
    }

    @Override
    public void put(final String url, final Object request, final Object... uriVariables) throws RestClientException {
        // nothing
    }

    @Override
    public void put(final String url, final Object request, final Map<String, ?> uriVariables) throws RestClientException {
        // nothing
    }

    @Override
    public void put(final URI url, final Object request) throws RestClientException {
        // nothing
    }

    @Override
    public void delete(final String url, final Object... uriVariables) throws RestClientException {
        // nothing
    }

    @Override
    public void delete(final String url, final Map<String, ?> uriVariables) throws RestClientException {
        // nothing
    }

    @Override
    public void delete(final URI url) throws RestClientException {
        // nothing
    }

    @Override
    public Set<HttpMethod> optionsForAllow(final String url, final Object... uriVariables) throws RestClientException {
        return null;
    }

    @Override
    public Set<HttpMethod> optionsForAllow(final String url, final Map<String, ?> uriVariables) throws RestClientException {
        return null;
    }

    @Override
    public Set<HttpMethod> optionsForAllow(final URI url) throws RestClientException {
        return null;
    }

    @Override
    public <T> ResponseEntity<T> exchange(final String url, final HttpMethod method, final HttpEntity<?> requestEntity,
            final Class<T> responseType, final Object... uriVariables) throws RestClientException {
        return null;
    }

    @Override
    public <T> ResponseEntity<T> exchange(final String url, final HttpMethod method, final HttpEntity<?> requestEntity,
            final Class<T> responseType, final Map<String, ?> uriVariables) throws RestClientException {
        return null;
    }

    @Override
    public <T> ResponseEntity<T> exchange(final URI url, final HttpMethod method, final HttpEntity<?> requestEntity, final Class<T> responseType)
            throws RestClientException {
        return null;
    }

    @Override
    public <T> ResponseEntity<T> exchange(final String url, final HttpMethod method, final HttpEntity<?> requestEntity,
            final ParameterizedTypeReference<T> responseType, final Object... uriVariables) throws RestClientException {
        return null;
    }

    @Override
    public <T> ResponseEntity<T> exchange(final String url, final HttpMethod method, final HttpEntity<?> requestEntity,
            final ParameterizedTypeReference<T> responseType, final Map<String, ?> uriVariables) throws RestClientException {
        return null;
    }

    @Override
    public <T> ResponseEntity<T> exchange(final URI url, final HttpMethod method, final HttpEntity<?> requestEntity,
            final ParameterizedTypeReference<T> responseType) throws RestClientException {
        return null;
    }

    @Override
    public <T> T execute(final String url, final HttpMethod method, final RequestCallback requestCallback,
            final ResponseExtractor<T> responseExtractor, final Object... uriVariables) throws RestClientException {
        return null;
    }

    @Override
    public <T> T execute(final String url, final HttpMethod method, final RequestCallback requestCallback,
            final ResponseExtractor<T> responseExtractor, final Map<String, ?> uriVariables) throws RestClientException {
        return null;
    }

    @Override
    public <T> T execute(final URI url, final HttpMethod method, final RequestCallback requestCallback,
            final ResponseExtractor<T> responseExtractor) throws RestClientException {
        return null;
    }

}
