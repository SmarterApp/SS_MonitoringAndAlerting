/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.monitoringalerting.rest;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.junit.Test;
import org.opentestsystem.shared.monitoringalerting.domain.NotificationGroup;
import org.opentestsystem.shared.search.domain.SearchResponse;

@SuppressWarnings({ "PMD.ShortVariable" })
public class NotificationGroupControllerIntegrationTest extends AbstractRestEmbeddedMongoTest {

    private static final String GRP_NM = "groupName";
    private static final String GBP = "Green Bay Packers";
    private static final String MEM_NMS = "memberNames";
    private static final String NOTIFGRP_EP = "/notificationGroup";
    private static final String ARODGERS = "arodgers@gbdomain.com";

    @Test
    public void createAndUpdateGroupTest() throws InterruptedException {
        HashMap<String, Object> params = new HashMap<String, Object>();
        params.put(GRP_NM, GBP);

        List<String> members = new ArrayList<String>(Arrays.asList(new String[] { ARODGERS, "cwoodson@gbdomain.com", "jnelson@gbdomain.com" }));

        params.put(MEM_NMS, members);

        NotificationGroup grp = callPOSTRestService(NOTIFGRP_EP, params, NotificationGroup.class);
        String newId = grp.getId();
        assertNotNull("Id should be generated", newId);

        assertEquals("wrong name", GBP, grp.getGroupName());
        assertEquals("wrong number of members", 3, grp.getMemberNames().size());
        assertTrue("rodgers is good he should be a member", grp.getMemberNames().contains(ARODGERS));

        // update
        members.add("rcobb@gbdomain.com");

        NotificationGroup updated = callPutRestService("/notificationGroup/" + newId, params, NotificationGroup.class);

        assertEquals("wrong name", GBP, updated.getGroupName());
        assertEquals("wrong number of members", 4, updated.getMemberNames().size());
        assertTrue("rodgers is good he should be a member", updated.getMemberNames().contains(ARODGERS));
        assertTrue("cobb is good too glad to have him", updated.getMemberNames().contains("rcobb@gbdomain.com"));

        NotificationGroup getObj = callGETRestService("/notificationGroup/" + newId, NotificationGroup.class);

        assertEquals("wrong name", GBP, getObj.getGroupName());
        assertEquals("wrong number of members", 4, getObj.getMemberNames().size());
        assertTrue("rodgers is good he should be a member", getObj.getMemberNames().contains(ARODGERS));
        assertTrue("cobb is good too glad to have him", getObj.getMemberNames().contains("rcobb@gbdomain.com"));
    }

    @Test
    public void testSearchQuery() throws InterruptedException {
        NotificationGroup group = PODAM_FACTORY.manufacturePojo(NotificationGroup.class);
        group.setId(null);

        mongoTemplate.insert(group);

        HashMap<String, String> params = new HashMap<String, String>();
        params.put(GRP_NM, group.getGroupName());

        @SuppressWarnings("unchecked")
        SearchResponse<NotificationGroup> response = callGETRestService(NOTIFGRP_EP + buildQueryString(params), SearchResponse.class);

        assertEquals("search should return notificationGroup object", 1, response.getSearchResults().size());
    }

    @Test
    public void testDelete() throws InterruptedException {
        NotificationGroup group = PODAM_FACTORY.manufacturePojo(NotificationGroup.class);
        group.setId(null);

        mongoTemplate.insert(group);

        String id = group.getId();

        NotificationGroup found = mongoTemplate.findById(id, NotificationGroup.class);
        assertNotNull("you didn't find me...", found);

        callDeleteRestService("/notificationGroup/" + id);

        NotificationGroup deleted = mongoTemplate.findById(id, NotificationGroup.class);
        assertNull("This should be deleted", deleted);
    }

    @Test
    public void testInvalidJSON() throws InterruptedException {
        HashMap<String, Object> params = new HashMap<String, Object>();
        params.put(GRP_NM, GBP);
        params.put(MEM_NMS, ARODGERS);

        Map<String, List<String>> messages = callPOSTWithBadData(NOTIFGRP_EP, params);
        assertTrue("error message correct", messages.get("applicationErrors").get(0).endsWith("bind.exception"));
    }

    @Test
    public void testInvalidData() throws InterruptedException {
        HashMap<String, Object> params = new HashMap<String, Object>();
        params.put(GRP_NM, "");
        List<String> members = new ArrayList<String>();
        params.put(MEM_NMS, members);

        Map<String, List<String>> messages = callPOSTWithBadData(NOTIFGRP_EP, params);
        assertFieldLevelErrorMessageReturned(messages, GRP_NM, "notificationGroup.groupName.required");
        assertFieldLevelErrorMessageReturned(messages, MEM_NMS, "notificationGroup.memberNames.required");
    }
}
