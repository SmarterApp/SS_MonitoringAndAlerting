/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.monitoringalerting.rest;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.junit.Test;
import org.opentestsystem.shared.monitoringalerting.domain.NotificationGroup;
import org.opentestsystem.shared.monitoringalerting.domain.NotificationRule;
import org.opentestsystem.shared.search.domain.SearchResponse;

@SuppressWarnings({ "PMD.ShortVariable" })
public class NotificationRuleControllerIntegrationTest extends AbstractRestEmbeddedMongoTest {

    private static final String RULE_TYPE = "ruleType";
    private static final String ALERT = "ALERT";
    private static final String ATTRIB = "attribute";

    @Test
    public void createAndUpdateRuleTest() throws InterruptedException {
        NotificationGroup grp = PODAM_FACTORY.manufacturePojo(NotificationGroup.class);
        mongoTemplate.save(grp);

        NotificationGroup groupToNotify = new NotificationGroup();
        groupToNotify.setId(grp.getId());

        Map<String, Object> params = new HashMap<String, Object>();
        params.put(RULE_TYPE, ALERT);
        params.put(ATTRIB, "alertType");
        params.put("regex", "ITEM_IMPORTED");
        params.put("notificationGroups", new NotificationGroup[] { groupToNotify });

        NotificationRule rule = callPOSTRestService("/notificationRule", params, NotificationRule.class);
        String newId = rule.getId();
        assertNotNull("Id should be generated", newId);

        assertEquals("wrong type", ALERT, rule.getRuleType().name());
        assertEquals("wrong attribute", "alertType", rule.getAttribute());
        assertEquals("should be a group", 1, rule.getNotificationGroups().size());

        params.put(ATTRIB, "message");
        params.put("regex", ".*items imported.?/\\");

        NotificationRule updated = callPutRestService("/notificationRule/" + newId, params, NotificationRule.class);
        assertEquals("wrong type", ALERT, updated.getRuleType().name());
        assertEquals("wrong attribute", "message", updated.getAttribute());
        assertEquals("wrong regex", ".*items imported.?/\\", updated.getRegex());
        assertEquals("should be a group", 1, updated.getNotificationGroups().size());

        NotificationRule getObj = callGETRestService("/notificationRule/" + newId, NotificationRule.class);
        assertEquals("wrong type", ALERT, getObj.getRuleType().name());
        assertEquals("wrong attribute", "message", getObj.getAttribute());
        assertEquals("wrong regex", ".*items imported.?/\\", getObj.getRegex());
        assertEquals("should be a group", 1, getObj.getNotificationGroups().size());
    }

    @Test
    public void testSearchQuery() throws InterruptedException {
        NotificationRule rule = PODAM_FACTORY.manufacturePojo(NotificationRule.class);
        rule.setId(null);

        mongoTemplate.insert(rule);

        HashMap<String, String> params = new HashMap<String, String>();
        params.put(ATTRIB, rule.getAttribute());
        params.put(RULE_TYPE, rule.getRuleType().name());

        @SuppressWarnings("unchecked")
        SearchResponse<NotificationRule> response = callGETRestService("/notificationRule" + buildQueryString(params), SearchResponse.class);

        assertEquals("search should return NotificationRule object", 1, response.getSearchResults().size());
    }

    @Test
    public void testDelete() throws InterruptedException {
        NotificationRule rule = PODAM_FACTORY.manufacturePojo(NotificationRule.class);
        rule.setId(null);
        mongoTemplate.insert(rule);

        String id = rule.getId();

        NotificationRule found = mongoTemplate.findById(id, NotificationRule.class);
        assertNotNull("you didn't find me...", found);

        callDeleteRestService("/notificationRule/" + id);

        NotificationRule deleted = mongoTemplate.findById(id, NotificationRule.class);
        assertNull("This should be deleted", deleted);
    }

    @Test
    public void testInvalidData() throws InterruptedException {
        HashMap<String, Object> params = new HashMap<String, Object>();
        params.put(ATTRIB, "");
        params.put("notificationGroups", new ArrayList<String>());
        params.put("regex", "");
        params.put(RULE_TYPE, "");

        Map<String, List<String>> messages = callPOSTWithBadData("/notificationRule", params);
        assertFieldLevelErrorMessageReturned(messages, ATTRIB, "notificationRule.attribute.required");
        assertFieldLevelErrorMessageReturned(messages, RULE_TYPE, "notificationRule.ruleType.required");
        assertFieldLevelErrorMessageReturned(messages, "notificationGroups", "notificationRule.notificationGroups.required");
    }

}
