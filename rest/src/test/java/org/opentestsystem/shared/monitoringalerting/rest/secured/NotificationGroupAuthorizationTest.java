/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 *
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * https://bitbucket.org/sbacoss/eotds/wiki/AIR_Open_Source_License
 ******************************************************************************/
package org.opentestsystem.shared.monitoringalerting.rest.secured;

import static org.hamcrest.CoreMatchers.equalTo;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.notNullValue;
import static org.hamcrest.CoreMatchers.nullValue;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import java.util.List;
import java.util.Map;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.shared.docs.annotation.ApiDocExample;
import org.opentestsystem.shared.monitoringalerting.domain.NotificationGroup;
import org.opentestsystem.shared.monitoringalerting.gateway.NotificationGroupService;
import org.opentestsystem.shared.monitoringalerting.rest.AbstractSecuredRestEmbeddedMongoTest;
import org.opentestsystem.shared.monitoringalerting.rest.Permissions;
import org.springframework.beans.factory.annotation.Autowired;

import com.google.common.collect.Lists;

public class NotificationGroupAuthorizationTest extends AbstractSecuredRestEmbeddedMongoTest {
    private static final String NOTIFICATION_GROUP_URL = "/notificationGroup";

    @Autowired
    private NotificationGroupService notificationGroupService;

    private List<Permissions> permissions;
    private NotificationGroup savedNotificationGroup;

    @ApiDocExample(rank = -1)
    @Before
    public void setupTestData() {
        permissions = Lists.newArrayList();
    }

    void setupNotificationGroup(final int uniqueId) {
        this.savedNotificationGroup = saveSampleNotificationGroup(uniqueId);
    }

    /**************************************** NotificationGroup ****************************************/
    @Test
    public void testNotificationGroupRead() {
        setupNotificationGroup(1);
        permissions.add(Permissions.MNA_READ);
        setUserWithRoles(permissions);
        final NotificationGroup fetchedNotificationGroup = callGETRestService(NOTIFICATION_GROUP_URL + "/" + this.savedNotificationGroup.getId(), NotificationGroup.class);
        assertThat(fetchedNotificationGroup, is(notNullValue()));
        assertThat(fetchedNotificationGroup.getId(), is(notNullValue()));
    }

    @Test
    public void testNotificationGroupModify() {
        permissions.add(Permissions.MNA_NOTIFICATION_ADMIN);
        setUserWithRoles(permissions);
        final Map<String, Object> notificationGroupParams = buildNotificationGroupMap(0);
        notificationGroupParams.put("groupName", "New Group Name");
        final NotificationGroup updatedNotificationGroup = callPutRestService(NOTIFICATION_GROUP_URL + "/" + notificationGroupParams.get("id"), notificationGroupParams, NotificationGroup.class);
        assertThat(updatedNotificationGroup, is(notNullValue()));
        assertThat(updatedNotificationGroup.getGroupName(), is(equalTo("New Group Name")));
        assertThat(updatedNotificationGroup.getId(), is(notNullValue()));
    }

    @Test
    public void testNotificationGroupReadFail() {
        setupNotificationGroup(3);
        permissions.add(Permissions.MNA_MODIFY);
        setUserWithRoles(permissions);
        final NotificationGroup fetchedNotificationGroup = callGETRestService(NOTIFICATION_GROUP_URL + "/" + this.savedNotificationGroup.getId(), NotificationGroup.class, status().isUnauthorized());
        assertThat(fetchedNotificationGroup, is(notNullValue()));
        assertThat(fetchedNotificationGroup.getId(), is(nullValue()));
    }

    @Test
    public void testNotificationGroupModifyFail() {
        permissions.add(Permissions.MNA_READ);
        setUserWithRoles(permissions);
        final Map<String, Object> notificationGroupParams = buildNotificationGroupMap(0);
        notificationGroupParams.put("textDescription", "New Text Description");
        final NotificationGroup updatedNotificationGroup = callPUTRestService(NOTIFICATION_GROUP_URL + "/" + notificationGroupParams.get("id"), notificationGroupParams, NotificationGroup.class,
                status()
                .isUnauthorized());
        assertThat(updatedNotificationGroup, is(notNullValue()));
    }

    /***********************************************************************************************/

    private NotificationGroup saveSampleNotificationGroup(final int uniqueId) {
        final NotificationGroup notificationGroup = PODAM_FACTORY.manufacturePojo(NotificationGroup.class);
        notificationGroup.setActive(true);
        notificationGroup.setGroupName("group name");

        List<String> memberNames = Lists.newArrayList();
        memberNames.add("member 1");
        memberNames.add("member 2");
        memberNames.add("member 3");
        notificationGroup.setMemberNames(memberNames);

        return this.notificationGroupService.save(notificationGroup);
    }

    private Map<String, Object> buildNotificationGroupMap(final int uniqueId) {
        return buildParamObject(saveSampleNotificationGroup(uniqueId));
    }

}
