/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.monitoringalerting.domain;

import org.joda.time.DateTime;
import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.mapping.Document;

/**
 * Used to defer the update of a metric refresh rate
 */
@Document
public class MetricRefresh implements MAEntityBase {

    private static final long serialVersionUID = -284574611935296926L;

    @Id
    private String id; // NOPMD

    private String metricName;

    private MAAlternateKey alternateKey;

    private Integer refreshRate;

    private DateTime insertTimestamp;
    private DateTime metricUpdatedTimestamp;
    private DateTime processedTimestamp;

    private String processedFlag;

    private static final int SB_SIZE = 160;

    /**
     * default constructor sets the processed flag to "N"
     */
    public MetricRefresh() {
        this.processedFlag = "N";
    }

    public MetricRefresh(final String inServer, final String inNode, final String inComponent, final String inMetricName, final Integer inRefreshRate) {
        this();
        this.alternateKey = new MAAlternateKey(inServer, inNode, inComponent);
        this.metricName = inMetricName;
        this.refreshRate = inRefreshRate;
    }

    public String getId() {
        return id;
    }

    public void setId(final String inId) {
        this.id = inId;
    }

    public Integer getRefreshRate() {
        return refreshRate;
    }

    public void setRefreshRate(final Integer inRefreshRate) {
        this.refreshRate = inRefreshRate;
    }

    public DateTime getInsertTimestamp() {
        return insertTimestamp;
    }

    public void setInsertTimestamp(final DateTime inInsertTimestamp) {
        this.insertTimestamp = inInsertTimestamp;
    }

    public DateTime getMetricUpdatedTimestamp() {
        return metricUpdatedTimestamp;
    }

    public void setMetricUpdatedTimestamp(final DateTime inMetricUpdatedTimestamp) {
        this.metricUpdatedTimestamp = inMetricUpdatedTimestamp;
    }

    public String getMetricName() {
        return metricName;
    }

    public void setMetricName(final String inMetricName) {
        this.metricName = inMetricName;
    }

    public DateTime getProcessedTimestamp() {
        return processedTimestamp;
    }

    public void setProcessedTimestamp(final DateTime inProcessedTimestamp) {
        this.processedTimestamp = inProcessedTimestamp;
    }

    public String getProcessedFlag() {
        return processedFlag;
    }

    public void setProcessedFlag(final String inProcessedFlag) {
        this.processedFlag = inProcessedFlag;
    }

    public MAAlternateKey getAlternateKey() {
        return alternateKey;
    }

    public void setAlternateKey(final MAAlternateKey inAlternateKey) {
        this.alternateKey = inAlternateKey;
    }

    /**
     * Generates the metric key name used to cache things
     * 
     * @return
     */
    public String getMetricKeyName() {
        StringBuilder sbuilder = new StringBuilder();

        sbuilder.append(alternateKey.getHypericName());
        sbuilder.append('/');
        sbuilder.append(this.metricName);

        return sbuilder.toString();
    }

    @Override
    public String toString() {
        StringBuilder sbuilder = new StringBuilder(SB_SIZE);

        sbuilder.append("MetricRefresh: [id: ");
        sbuilder.append(id);
        sbuilder.append(", metricName: ");
        sbuilder.append(metricName);
        sbuilder.append(", alternateKey: ");
        sbuilder.append(alternateKey);
        sbuilder.append(", refreshRate: ");
        sbuilder.append(refreshRate);
        sbuilder.append(", insertTimestamp: ");
        sbuilder.append(insertTimestamp);
        sbuilder.append(", metricUpdatedTimestamp: ");
        sbuilder.append(metricUpdatedTimestamp);
        sbuilder.append(", processedTimestamp: ");
        sbuilder.append(processedTimestamp);
        sbuilder.append(", processedFlag: ");
        sbuilder.append(processedFlag);
        sbuilder.append("]\n");

        return sbuilder.toString();
    }
}
