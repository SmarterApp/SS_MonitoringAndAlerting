/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.monitoringalerting.domain.search;

import java.util.Arrays;
import java.util.List;
import java.util.Map;

import org.opentestsystem.shared.search.domain.SearchFilter;
import org.opentestsystem.shared.search.domain.SearchFilter.Operator;
import org.opentestsystem.shared.search.domain.SearchFilter.SearchDataType;

/**
 * This is a psuedo-domain object, not really existing in the persistent store, but instead is used as part of the
 * Gateway interface for convey complex search criteria. Note: page counting in mongo is zero indexed.
 */
public class LogSearchRequest extends AbstractRangedSearchRequest {

    private static final long serialVersionUID = -133799416955548296L;

    private static final String INSERT_TIMESTAMP_STRING = "insertTimestamp";

    private static final String SEARCH_RESOURCE = "/logs";

    private static final List<SearchFilter> SEARCH_FILTERS = Arrays
            .asList(new SearchFilter[] {
                    new SearchFilter("server", "alternateKey.server", Operator.EQ, SearchDataType.String),
                    new SearchFilter("node", "alternateKey.node", Operator.EQ, SearchDataType.String),
                    new SearchFilter("severity", Operator.EQ, SearchDataType.String),
                    new SearchFilter("component", "alternateKey.component", Operator.EQ, SearchDataType.String),
                    new SearchFilter("referenceNumber", Operator.EQ, SearchDataType.String),
                    new SearchFilter("message", Operator.WLD_REG, SearchDataType.String),
                    new SearchFilter("stackTrace", Operator.WLD_REG, SearchDataType.String),
                    new SearchFilter("insertTimestampGreaterThan", INSERT_TIMESTAMP_STRING, Operator.GTH, SearchDataType.ISO8601Date),
                    new SearchFilter("insertTimestampLessThan", INSERT_TIMESTAMP_STRING, Operator.LTH, SearchDataType.ISO8601Date),
                    new SearchFilter("insertTimestampMillisGreaterThan", INSERT_TIMESTAMP_STRING, Operator.GTH, SearchDataType.MilliDate),
                    new SearchFilter("insertTimestampMillisLessThan", INSERT_TIMESTAMP_STRING, Operator.LTH, SearchDataType.MilliDate) });

    public LogSearchRequest(final Map<String, String[]> inRequestMap) {
        super(inRequestMap);
    }

    @Override
    public List<SearchFilter> getSearchFilters() {
        return SEARCH_FILTERS;
    }

    @Override
    public String getSearchResource() {
        return SEARCH_RESOURCE;
    }
}
