/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.monitoringalerting.domain;

import javax.validation.constraints.NotNull;
import javax.xml.bind.annotation.XmlTransient;

import org.hibernate.validator.constraints.NotBlank;
import org.joda.time.DateTime;
import org.opentestsystem.shared.monitoringalerting.domain.validation.CorrectKeys;
import org.opentestsystem.shared.monitoringalerting.domain.validation.StandaloneValidation;
import org.opentestsystem.shared.monitoringalerting.domain.validation.ValidCategoryType;
import org.springframework.data.annotation.Id;
import org.springframework.data.annotation.Transient;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

/**
 * Registration information about metrics that should be exported via JMX
 */
@SuppressWarnings({ "PMD.ShortVariable" })
@CorrectKeys(message = "metric.no.valid.keys.found", groups = StandaloneValidation.class)
@JsonIgnoreProperties(ignoreUnknown = true)
public class MetricInfo implements MAEntityBase {

    private static final long serialVersionUID = -2507464285524831547L;

    private static final String GET_RESOURCE_NAME = "/metricInfo/";

    @Id
    private String id;

    private String regId;

    private MAAlternateKey alternateKey;

    @NotBlank(message = "metric.name.required")
    private String name;

    @NotBlank(message = "metric.description.required")
    private String description;

    @NotNull(message = "metric.category.required")
    @ValidCategoryType(message = "metric.category.invalid.type", types = { CategoryType.AVAILABILITY, CategoryType.PERFORMANCE, CategoryType.THROUGHPUT, CategoryType.UTILIZATION })
    private CategoryType category;

    @NotBlank(message = "metric.displayName.required")
    private String displayName;

    private int intervalPeriodInSeconds;

    private Number defaultValue;

    private DateTime insertTimestamp;

    @Transient
    private Errors errors;

    private static final int SB_SIZE = 175;

    public MetricInfo() {
        this.alternateKey = new MAAlternateKey();
    }

    public MetricInfo(final String server, final String node, final String component) {
        this.alternateKey = new MAAlternateKey(server, node, component);
    }

    public MetricInfo(final String inServer, final String inNode, final String inComponent, final String inName, final String inDescription, final CategoryType inCategory,
            final String inDisplayName, final int inInterval, final Number inDefaultValue) {
        this(inServer, inNode, inComponent);
        this.name = inName;
        this.description = inDescription;
        this.category = inCategory;
        this.displayName = inDisplayName;
        this.intervalPeriodInSeconds = inInterval;
        this.defaultValue = inDefaultValue;
    }

    public MetricInfo(final String inServer, final String inNode, final String inComponent, final String inName, final String inDescription, final CategoryType inCategory,
            final String inDisplayName, final int inInterval) {
        this(inServer, inNode, inComponent);
        this.name = inName;
        this.description = inDescription;
        this.category = inCategory;
        this.displayName = inDisplayName;
        this.intervalPeriodInSeconds = inInterval;
    }

    public String getId() {
        return this.id;
    }

    public void setId(final String inId) {
        this.id = inId;
    }

    public String getRegId() {
        return this.regId;
    }

    public void setRegId(final String inRegId) {
        this.regId = inRegId;
    }

    public String getName() {
        return this.name;
    }

    public void setName(final String inName) {
        this.name = inName;
    }

    public String getDescription() {
        return this.description;
    }

    public void setDescription(final String inDescription) {
        this.description = inDescription;
    }

    public CategoryType getCategory() {
        return this.category;
    }

    public void setCategory(final CategoryType inCategory) {
        this.category = inCategory;
    }

    public String getDisplayName() {
        return this.displayName;
    }

    public void setDisplayName(final String inDisplayName) {
        this.displayName = inDisplayName;
    }

    public int getIntervalPeriodInSeconds() {
        return this.intervalPeriodInSeconds;
    }

    public void setIntervalPeriodInSeconds(final int inIntervalPeriodInSeconds) {
        this.intervalPeriodInSeconds = inIntervalPeriodInSeconds;
    }

    public Number getDefaultValue() {
        return this.defaultValue;
    }

    public void setDefaultValue(final Number inDefaultValue) {
        this.defaultValue = inDefaultValue;
    }

    @JsonIgnore
    public String getComponent() {
        return this.alternateKey.getComponent();
    }

    public void setComponent(final String inComponent) {
        this.alternateKey.setComponent(inComponent);
    }

    @JsonIgnore
    public String getServer() {
        return this.alternateKey.getServer();
    }

    public void setServer(final String inServer) {
        this.alternateKey.setServer(inServer);
    }

    @JsonIgnore
    public String getNode() {
        return this.alternateKey.getNode();
    }

    public void setNode(final String inNode) {
        this.alternateKey.setNode(inNode);
    }

    public DateTime getInsertTimestamp() {
        return this.insertTimestamp;
    }

    public void setInsertTimestamp(final DateTime inInsertTimestamp) {
        this.insertTimestamp = inInsertTimestamp;
    }

    public Errors getErrors() {
        return this.errors;
    }

    public void setErrors(final Errors inErrors) {
        this.errors = inErrors;
    }

    @Override
    public String toString() {
        final StringBuilder sbuilder = new StringBuilder(SB_SIZE);

        sbuilder.append("MetricInfo [ id = ");
        sbuilder.append(this.id);
        sbuilder.append(", alternateKey = ");
        sbuilder.append(this.alternateKey);
        sbuilder.append(", regId = ");
        sbuilder.append(this.regId);
        sbuilder.append(", name = ");
        sbuilder.append(this.name);
        sbuilder.append(", description = ");
        sbuilder.append(this.description);
        sbuilder.append(", category = ");
        sbuilder.append(this.category);
        sbuilder.append(", displayName = ");
        sbuilder.append(this.displayName);
        sbuilder.append(", insertTimestamp = ");
        sbuilder.append(this.insertTimestamp);
        sbuilder.append(", intervalPeriodInSeconds = ");
        sbuilder.append(this.intervalPeriodInSeconds);
        sbuilder.append(", defaultValue = ");
        sbuilder.append(this.defaultValue);
        sbuilder.append(" ]\n");

        return sbuilder.toString();
    }

    @XmlTransient
    public String getUrl() {
        return GET_RESOURCE_NAME + getId();
    }

    public boolean alertCreationComplete() {
        return false;
    }

    public MAAlternateKey getAlternateKey() {
        return this.alternateKey;
    }

    public void setAlternateKey(final MAAlternateKey inAlternateKey) {
        this.alternateKey = inAlternateKey;
    }

    /**
     * Generates the metric key name used to cache things
     * 
     * @return
     */
    public String getMetricKeyName() {
        final StringBuilder sbuilder = new StringBuilder();

        sbuilder.append(this.alternateKey.getHypericName());
        sbuilder.append('/');
        sbuilder.append(this.name);

        return sbuilder.toString();
    }
}
