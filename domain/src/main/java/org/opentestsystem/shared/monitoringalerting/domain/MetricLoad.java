/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.monitoringalerting.domain;

import org.joda.time.DateTime;
import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.mapping.Document;

/**
 * Used to defer loading of Metrics into the Hyperic Resource Cache
 */
@Document
public class MetricLoad implements MAEntityBase {

    private static final long serialVersionUID = -5470238704083550674L;

    @Id
    private String id; // NOPMD

    private Integer resourceId;
    private DateTime insertTimestamp;
    private DateTime loadedTimestamp;
    private String processedFlag;
    private DateTime processedTimestamp;
    private static final int SB_SIZE = 120;

    /**
     * Default constructor sets processed flag to "N"
     */
    public MetricLoad() {
        this.processedFlag = "N";
    }

    public MetricLoad(final Integer inResourceId, final DateTime inInsertTimestamp) {
        this();
        this.resourceId = inResourceId;
        this.insertTimestamp = inInsertTimestamp;
    }

    public String getId() {
        return id;
    }

    public void setId(final String inId) {
        this.id = inId;
    }

    public Integer getResourceId() {
        return resourceId;
    }

    public void setResourceId(final Integer inResourceId) {
        this.resourceId = inResourceId;
    }

    public DateTime getInsertTimestamp() {
        return insertTimestamp;
    }

    public void setInsertTimestamp(final DateTime inInsertTimestamp) {
        this.insertTimestamp = inInsertTimestamp;
    }

    public DateTime getLoadedTimestamp() {
        return loadedTimestamp;
    }

    public void setLoadedTimestamp(final DateTime inLoadedTimestamp) {
        this.loadedTimestamp = inLoadedTimestamp;
    }

    public String getProcessedFlag() {
        return processedFlag;
    }

    public void setProcessedFlag(final String inProcessedFlag) {
        this.processedFlag = inProcessedFlag;
    }

    public DateTime getProcessedTimestamp() {
        return processedTimestamp;
    }

    public void setProcessedTimestamp(final DateTime inProcessedTimestamp) {
        this.processedTimestamp = inProcessedTimestamp;
    }

    @Override
    public String toString() {
        StringBuilder sbuilder = new StringBuilder(SB_SIZE);

        sbuilder.append("MetricLoad: [id: ");
        sbuilder.append(id);
        sbuilder.append(", resourceId: ");
        sbuilder.append(resourceId);
        sbuilder.append(", insertTimestamp: ");
        sbuilder.append(insertTimestamp);
        sbuilder.append(", loadedTimestamp: ");
        sbuilder.append(loadedTimestamp);
        sbuilder.append(", processedTimestamp: ");
        sbuilder.append(processedTimestamp);
        sbuilder.append(", processedFlag: ");
        sbuilder.append(processedFlag);
        sbuilder.append("]\n");

        return sbuilder.toString();
    }

}
