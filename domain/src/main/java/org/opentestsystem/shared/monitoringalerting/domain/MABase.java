/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.monitoringalerting.domain;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;

import org.joda.time.DateTime;
import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.index.Indexed;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Base class for most of the M&A domain objects. Contains common fields.
 */
public abstract class MABase implements MAEntityBase {

    private static final long serialVersionUID = -2493468876915544946L;

    @Valid
    @NotNull(message = "alternateKey.required")
    protected MAAlternateKey alternateKey;
    @Indexed
    protected String severity;
    @Indexed
    protected DateTime insertTimestamp;
    protected String message;

    private static final int SB_SIZE = 80;

    @Id
    private String id; // NOPMD

    public MABase() {
        this.alternateKey = new MAAlternateKey();
    }

    public MABase(final String aserver, final String anode, final String acomponent) {
        this.alternateKey = new MAAlternateKey(aserver, anode, acomponent);
    }

    @JsonIgnore
    public String getServer() {
        return this.alternateKey.getServer();
    }

    public void setServer(final String inServer) {
        this.alternateKey.setServer(inServer);
    }

    @JsonIgnore
    public String getNode() {
        return this.alternateKey.getNode();
    }

    public void setNode(final String anode) {
        this.alternateKey.setNode(anode);
    }

    public DateTime getInsertTimestamp() {
        return this.insertTimestamp;
    }

    public void setInsertTimestamp(final DateTime ainsertTimestamp) {
        this.insertTimestamp = ainsertTimestamp;
    }

    @JsonIgnore
    public String getComponent() {
        return this.alternateKey.getComponent();
    }

    public void setComponent(final String inComponent) {
        this.alternateKey.setComponent(inComponent);
    }

    public String getMessage() {
        return this.message;
    }

    public void setMessage(final String amessage) {
        this.message = amessage;
    }

    public String getId() {
        return this.id;
    }

    public void setId(final String inId) {
        this.id = inId;
    }

    public String getSeverity() {
        return this.severity;
    }

    public void setSeverity(final String inSeverity) {
        this.severity = inSeverity;
    }

    public MAAlternateKey getAlternateKey() {
        return this.alternateKey;
    }

    public void setAlternateKey(final MAAlternateKey inAlternateKey) {
        this.alternateKey = inAlternateKey;
    }

    @Override
    public String toString() {

        final StringBuilder sbuilder = new StringBuilder(SB_SIZE);
        sbuilder.append("MABase [id: ");
        sbuilder.append(this.id);
        sbuilder.append(", alternateKey: ");
        sbuilder.append(this.alternateKey);
        sbuilder.append(", severity: ");
        sbuilder.append(this.severity);
        sbuilder.append(", message: ");
        sbuilder.append(this.message);
        sbuilder.append(", insertTimestamp: ");
        sbuilder.append(this.insertTimestamp);
        sbuilder.append(']');

        return sbuilder.toString();
    }

    @JsonProperty
    public String getUrl() {
        return getResourceName() + getId();
    }

    /** gets the resource name. */
    protected abstract String getResourceName();

}
