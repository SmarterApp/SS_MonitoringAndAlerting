/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.monitoringalerting.domain;

import javax.validation.constraints.NotNull;

import org.hibernate.validator.constraints.NotBlank;
import org.springframework.data.mongodb.core.index.CompoundIndex;
import org.springframework.data.mongodb.core.index.CompoundIndexes;
import org.springframework.data.mongodb.core.index.Indexed;
import org.springframework.data.mongodb.core.mapping.Document;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

/**
 * Describes a Metric that should be forwarded to Hyperic
 */
@Document
@JsonIgnoreProperties(ignoreUnknown = true)
@CompoundIndexes(value = {
        @CompoundIndex(name = "alternateKeyIdx", def = "{'alternateKey.component':1, 'alternateKey.server':1, 'alternateKey.node':1}") })
public class Metric extends MABase {

    private static final long serialVersionUID = 340539984613079331L;

    private static final String GET_RESOURCE_NAME = "/metric/";

    private static final int SB_SIZE = 65;

    @NotNull(message = "metric.type.required")
    @Indexed
    private CategoryType metricType;

    @Indexed
    private Number metricValue;

    @NotBlank(message = "metric.name.required")
    private String metricName;

    public Metric() {
        super();
    }

    public Metric(final String server, final String node, final String component, final CategoryType inMetricType, final String inMetricName, final Number inMetricValue) {
        super(server, node, component);

        this.metricType = inMetricType;
        this.metricName = inMetricName;
        this.metricValue = inMetricValue;
    }

    public CategoryType getMetricType() {
        return metricType;
    }

    public void setMetricType(final CategoryType inMetricType) {
        this.metricType = inMetricType;
    }

    public Number getMetricValue() {
        return metricValue;
    }

    public void setMetricValue(final Number inMetricValue) {
        this.metricValue = inMetricValue;
    }

    public String getMetricName() {
        return metricName;
    }

    public void setMetricName(final String inMetricName) {
        this.metricName = inMetricName;
    }

    @Override
    public String toString() {
        StringBuilder sbuilder = new StringBuilder(SB_SIZE);

        sbuilder.append("Metric: [metricType = ");
        sbuilder.append(metricType);
        sbuilder.append(", metricValue = ");
        sbuilder.append(metricValue);
        sbuilder.append(", metricName = ");
        sbuilder.append(metricName);
        sbuilder.append("\n");
        sbuilder.append(super.toString());
        sbuilder.append(" ]\n");

        return sbuilder.toString();
    }

    @JsonIgnore
    public String getIdentityKey() {
        return getAlternateKey().getHypericName() + "/" + metricName;

    }

    @Override
    @JsonIgnore
    public String getResourceName() {
        return GET_RESOURCE_NAME;
    }

}
